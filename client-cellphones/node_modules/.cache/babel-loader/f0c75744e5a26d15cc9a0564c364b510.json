{"ast":null,"code":"import * as React from 'react';\nvar isCheckBoxInput = element => element.type === 'checkbox';\nvar isNullOrUndefined = value => value == null;\nconst isObjectType = value => typeof value === 'object';\nvar isObject = value => !isNullOrUndefined(value) && !Array.isArray(value) && isObjectType(value) && !(value instanceof Date);\nvar getControllerValue = event => isObject(event) && event.target ? isCheckBoxInput(event.target) ? event.target.checked : event.target.value : event;\nvar getNodeParentName = name => name.substring(0, name.search(/.\\d/)) || name;\nvar isNameInFieldArray = (names, name) => [...names].some(current => getNodeParentName(name) === current);\nvar compact = value => value.filter(Boolean);\nvar isUndefined = val => val === undefined;\nvar get = (obj, path, defaultValue) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\n    return isUndefined(result) || result === obj ? isUndefined(obj[path]) ? defaultValue : obj[path] : result;\n  }\n  return undefined;\n};\nconst EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change'\n};\nconst VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all'\n};\nconst INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate'\n};\nvar omit = (source, key) => {\n  const copy = Object.assign({}, source);\n  delete copy[key];\n  return copy;\n};\nconst FormContext = React.createContext(null);\nFormContext.displayName = 'RHFContext';\nconst useFormContext = () => React.useContext(FormContext);\nconst FormProvider = props => React.createElement(FormContext.Provider, {\n  value: omit(props, 'children')\n}, props.children);\nvar getProxyFormState = function (isProxyEnabled, formState, readFormStateRef, localReadFormStateRef) {\n  let isRoot = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n  return isProxyEnabled ? new Proxy(formState, {\n    get: (obj, prop) => {\n      if (prop in obj) {\n        if (readFormStateRef.current[prop] !== VALIDATION_MODE.all) {\n          readFormStateRef.current[prop] = isRoot ? VALIDATION_MODE.all : true;\n        }\n        localReadFormStateRef && (localReadFormStateRef.current[prop] = true);\n        return obj[prop];\n      }\n      return undefined;\n    }\n  }) : formState;\n};\nvar isEmptyObject = value => isObject(value) && !Object.keys(value).length;\nvar shouldRenderFormState = (formStateData, readFormStateRef, isRoot) => {\n  const formState = omit(formStateData, 'name');\n  return isEmptyObject(formState) || Object.keys(formState).length >= Object.keys(readFormStateRef).length || Object.keys(formState).find(key => readFormStateRef[key] === (isRoot ? VALIDATION_MODE.all : true));\n};\nvar convertToArrayPayload = value => Array.isArray(value) ? value : [value];\nvar isWeb = typeof window !== 'undefined' && typeof window.HTMLElement !== 'undefined' && typeof document !== 'undefined';\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== 'undefined';\nfunction useFormState(props) {\n  const {\n    control,\n    name\n  } = props || {};\n  const methods = useFormContext();\n  const {\n    formStateRef,\n    formStateSubjectRef,\n    readFormStateRef\n  } = control || methods.control;\n  const nameRef = React.useRef(name);\n  nameRef.current = name;\n  const [formState, updateFormState] = React.useState(formStateRef.current);\n  const readFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false\n  });\n  React.useEffect(() => {\n    const formStateSubscription = formStateSubjectRef.current.subscribe({\n      next: formState => (!nameRef.current || !formState.name || convertToArrayPayload(nameRef.current).includes(formState.name)) && shouldRenderFormState(formState, readFormState.current) && updateFormState(Object.assign(Object.assign({}, formStateRef.current), formState))\n    });\n    return () => formStateSubscription.unsubscribe();\n  }, []);\n  return getProxyFormState(isProxyEnabled, formState, readFormStateRef, readFormState, false);\n}\nfunction useController(_ref) {\n  let {\n    name,\n    rules,\n    defaultValue,\n    control,\n    shouldUnregister\n  } = _ref;\n  const methods = useFormContext();\n  const {\n    defaultValuesRef,\n    register,\n    fieldsRef,\n    unregister,\n    fieldArrayNamesRef,\n    controllerSubjectRef,\n    shouldUnmount,\n    inFieldArrayActionRef\n  } = control || methods.control;\n  const {\n    onChange,\n    onBlur,\n    ref\n  } = register(name, rules);\n  const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const [value, setInputStateValue] = React.useState(isUndefined(get(fieldsRef.current, name)._f.value) || isFieldArray ? isUndefined(defaultValue) ? get(defaultValuesRef.current, name) : defaultValue : get(fieldsRef.current, name)._f.value);\n  const formState = useFormState({\n    control: control || methods.control,\n    name\n  });\n  const field = get(fieldsRef.current, name);\n  field._f.value = value;\n  React.useEffect(() => {\n    const controllerSubscription = controllerSubjectRef.current.subscribe({\n      next: data => (!data.name || name === data.name) && setInputStateValue(get(data.values, name))\n    });\n    return () => {\n      controllerSubscription.unsubscribe();\n      const shouldUnmountField = shouldUnmount || shouldUnregister;\n      if (isFieldArray ? shouldUnmountField && !inFieldArrayActionRef.current : shouldUnmountField) {\n        unregister(name);\n      } else if (get(fieldsRef.current, name)) {\n        get(fieldsRef.current, name)._f.mount = false;\n      }\n    };\n  }, [name]);\n  return {\n    field: {\n      onChange: event => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n        onChange({\n          target: {\n            value,\n            name: name\n          },\n          type: EVENTS.CHANGE\n        });\n      },\n      onBlur: () => {\n        onBlur({\n          target: {\n            name: name\n          },\n          type: EVENTS.BLUR\n        });\n      },\n      name,\n      value,\n      ref: elm => elm && ref(elm)\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name)\n    }\n  };\n}\nconst Controller = props => props.render(useController(props));\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria ? Object.assign(Object.assign({}, errors[name]), {\n  types: Object.assign(Object.assign({}, errors[name] && errors[name].types ? errors[name].types : {}), {\n    [type]: message || true\n  })\n}) : {};\nvar isKey = value => /^\\w*$/.test(value);\nvar stringToPath = input => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\nfunction set(object, path, value) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue = isObject(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index + 1]) ? [] : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\nconst focusFieldBy = (fields, callback, fieldsNames) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\nconst getFieldsValues = function (fieldsRef) {\n  let output = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  for (const name in fieldsRef.current) {\n    const field = fieldsRef.current[name];\n    if (field && !isNullOrUndefined(output)) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n      set(output, name, _f && _f.ref ? _f.ref.disabled || _f.refs && _f.refs.every(ref => ref.disabled) ? undefined : _f.value : Array.isArray(field) ? [] : {});\n      current && getFieldsValues({\n        current\n      }, output[name]);\n    }\n  }\n  return output;\n};\nvar generateId = () => {\n  const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n  });\n};\nvar mapIds = function () {\n  let values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let keyName = arguments.length > 1 ? arguments[1] : undefined;\n  return values.map(value => Object.assign({\n    [keyName]: value && value[keyName] || generateId()\n  }, value));\n};\nvar isPrimitive = value => isNullOrUndefined(value) || !isObjectType(value);\nfunction deepEqual(object1, object2, isErrorObject) {\n  if (isPrimitive(object1) || isPrimitive(object2) || object1 instanceof Date || object2 instanceof Date) {\n    return object1 === object2;\n  }\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n    for (const key of keys1) {\n      const val1 = object1[key];\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n        if ((isObject(val1) || Array.isArray(val1)) && (isObject(val2) || Array.isArray(val2)) ? !deepEqual(val1, val2, isErrorObject) : val1 !== val2) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\nfunction deepMerge(target, source) {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n    try {\n      target[key] = isObject(targetValue) && isObject(sourceValue) || Array.isArray(targetValue) && Array.isArray(sourceValue) ? deepMerge(targetValue, sourceValue) : sourceValue;\n    } catch (_a) {}\n  }\n  return target;\n}\nfunction setDirtyFields(values, defaultValues, dirtyFields, parentNode, parentName) {\n  let index = -1;\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(values[index][key], get(defaultValues[index] || {}, key, []), dirtyFields[index][key], dirtyFields[index], key);\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key]) ? set(dirtyFields[index] || {}, key) : dirtyFields[index] = Object.assign(Object.assign({}, dirtyFields[index]), {\n          [key]: true\n        });\n      }\n    }\n    parentNode && !dirtyFields.length && delete parentNode[parentName];\n  }\n  return dirtyFields;\n}\nvar setFieldArrayDirtyFields = (values, defaultValues, dirtyFields) => deepMerge(setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)), setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)));\nfunction append(data, value) {\n  return [...data, ...convertToArrayPayload(value)];\n}\nvar fillEmptyArray = value => Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\nfunction insert(data, index, value) {\n  return [...data.slice(0, index), ...convertToArrayPayload(value), ...data.slice(index)];\n}\nvar isString = value => typeof value === 'string';\nvar moveArrayAt = (data, from, to) => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n  return [];\n};\nfunction prepend(data, value) {\n  return [...convertToArrayPayload(value), ...data];\n}\nfunction removeAtIndexes(data, indexes) {\n  let i = 0;\n  const temp = [...data];\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n  return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index) ? [] : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\nvar swapArrayAt = (data, indexA, indexB) => {\n  data[indexA] = [data[indexB], data[indexB] = data[indexA]][0];\n};\nvar isBoolean = value => typeof value === 'boolean';\nfunction baseGet(object, updatePath) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n  return object;\n}\nfunction unset(object, path) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n  if (childObject) {\n    delete childObject[key];\n  }\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n    if (k > 0) {\n      previousObjRef = object;\n    }\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n      if (currentPathsLength === index && (isObject(objectRef) && isEmptyObject(objectRef) || Array.isArray(objectRef) && !objectRef.filter(data => isObject(data) && !isEmptyObject(data) || isBoolean(data)).length)) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n      previousObjRef = objectRef;\n    }\n  }\n  return object;\n}\nconst useFieldArray = _ref2 => {\n  let {\n    control,\n    name,\n    keyName = 'id',\n    shouldUnregister\n  } = _ref2;\n  const methods = useFormContext();\n  const focusNameRef = React.useRef('');\n  const isMountedRef = React.useRef(false);\n  const {\n    isWatchAllRef,\n    watchFieldsRef,\n    getIsDirty,\n    watchSubjectRef,\n    fieldArraySubjectRef,\n    fieldArrayNamesRef,\n    fieldsRef,\n    defaultValuesRef,\n    formStateRef,\n    formStateSubjectRef,\n    readFormStateRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValuesRef,\n    unregister,\n    shouldUnmount,\n    inFieldArrayActionRef\n  } = control || methods.control;\n  const [fields, setFields] = React.useState(mapIds(get(fieldsRef.current, name) && isMountedRef.current ? get(getFieldsValues(fieldsRef), name) : get(fieldArrayDefaultValuesRef.current, getNodeParentName(name)) ? get(fieldArrayDefaultValuesRef.current, name, []) : get(defaultValuesRef.current, name, []), keyName));\n  set(fieldArrayDefaultValuesRef.current, name, [...fields]);\n  fieldArrayNamesRef.current.add(name);\n  const omitKey = fields => fields.map(field => omit(field || {}, keyName));\n  const getCurrentFieldsValues = () => {\n    const values = get(getFieldsValues(fieldsRef), name, []);\n    return mapIds(get(fieldArrayDefaultValuesRef.current, name, []).map((item, index) => Object.assign(Object.assign({}, item), values[index])), keyName);\n  };\n  const getFocusDetail = (index, options) => options ? !isUndefined(options.focusIndex) ? \"\".concat(name, \".\").concat(options.focusIndex) : options.focusName ? options.focusName : !options.shouldFocus ? '' : \"\".concat(name, \".\").concat(index) : \"\".concat(name, \".\").concat(index);\n  const resetFields = index => convertToArrayPayload(index).forEach(currentIndex => set(fieldsRef.current, \"\".concat(name).concat(isUndefined(currentIndex) ? '' : \".\".concat(currentIndex)), isUndefined(currentIndex) ? [] : undefined));\n  const setFieldsAndNotify = function () {\n    let fieldsValues = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    return setFields(mapIds(fieldsValues, keyName));\n  };\n  const cleanup = ref => !compact(get(ref, name, [])).length && unset(ref, name);\n  const updateDirtyFieldsWithDefaultValues = updatedFieldArrayValues => updatedFieldArrayValues && set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(omitKey(updatedFieldArrayValues), get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\n  const batchStateUpdate = function (method, args) {\n    let updatedFieldArrayValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    let shouldSet = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    inFieldArrayActionRef.current = true;\n    if (get(fieldsRef.current, name)) {\n      const output = method(get(fieldsRef.current, name), args.argA, args.argB);\n      shouldSet && set(fieldsRef.current, name, output);\n    }\n    if (Array.isArray(get(formStateRef.current.errors, name))) {\n      const output = method(get(formStateRef.current.errors, name), args.argA, args.argB);\n      shouldSet && set(formStateRef.current.errors, name, output);\n      cleanup(formStateRef.current.errors);\n    }\n    if (readFormStateRef.current.touchedFields && get(formStateRef.current.touchedFields, name)) {\n      const output = method(get(formStateRef.current.touchedFields, name), args.argA, args.argB);\n      shouldSet && set(formStateRef.current.touchedFields, name, output);\n      cleanup(formStateRef.current.touchedFields);\n    }\n    if (readFormStateRef.current.dirtyFields || readFormStateRef.current.isDirty) {\n      set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(omitKey(updatedFieldArrayValues), get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\n      updateDirtyFieldsWithDefaultValues(updatedFieldArrayValues);\n      cleanup(formStateRef.current.dirtyFields);\n    }\n    if (readFormStateRef.current.isValid) {\n      set(validFieldsRef.current, name, method(get(validFieldsRef.current, name, []), args.argA));\n      cleanup(validFieldsRef.current);\n      set(fieldsWithValidationRef.current, name, method(get(fieldsWithValidationRef.current, name, []), args.argA));\n      cleanup(fieldsWithValidationRef.current);\n    }\n    formStateSubjectRef.current.next({\n      isDirty: getIsDirty(name, omitKey(updatedFieldArrayValues)),\n      errors: formStateRef.current.errors,\n      isValid: formStateRef.current.isValid\n    });\n  };\n  const registerFieldArray = function (values) {\n    let index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let parentName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n    return values.forEach((appendValueItem, valueIndex) => !isPrimitive(appendValueItem) && Object.entries(appendValueItem).forEach(_ref3 => {\n      let [key, value] = _ref3;\n      const inputName = \"\".concat(parentName || name, \".\").concat(parentName ? valueIndex : index + valueIndex, \".\").concat(key);\n      Array.isArray(value) ? registerFieldArray(value, valueIndex, inputName) : set(fieldsRef.current, inputName, {\n        _f: {\n          ref: {\n            name: inputName\n          },\n          name: inputName,\n          value: isPrimitive(value) ? value : Object.assign({}, value)\n        }\n      });\n    }));\n  };\n  const append$1 = (value, options) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = append(getCurrentFieldsValues(), appendValue);\n    const currentIndex = updatedFieldArrayValues.length - appendValue.length;\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(append, {\n      argA: fillEmptyArray(value)\n    }, updatedFieldArrayValues, false);\n    registerFieldArray(appendValue, currentIndex);\n    focusNameRef.current = getFocusDetail(currentIndex, options);\n  };\n  const prepend$1 = (value, options) => {\n    const prependValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = prepend(getCurrentFieldsValues(), prependValue);\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(prepend, {\n      argA: fillEmptyArray(value)\n    }, updatedFieldArrayValues);\n    registerFieldArray(prependValue);\n    focusNameRef.current = getFocusDetail(0, options);\n  };\n  const remove = index => {\n    const updatedFieldArrayValues = removeArrayAt(getCurrentFieldsValues(), index);\n    resetFields(index);\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(removeArrayAt, {\n      argA: index\n    }, updatedFieldArrayValues);\n  };\n  const insert$1 = (index, value, options) => {\n    const insertValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = insert(getCurrentFieldsValues(), index, insertValue);\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(insert, {\n      argA: index,\n      argB: fillEmptyArray(value)\n    }, updatedFieldArrayValues);\n    registerFieldArray(insertValue, index);\n    focusNameRef.current = getFocusDetail(index, options);\n  };\n  const swap = (indexA, indexB) => {\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    batchStateUpdate(swapArrayAt, {\n      argA: indexA,\n      argB: indexB\n    }, fieldValues, false);\n    setFieldsAndNotify(fieldValues);\n  };\n  const move = (from, to) => {\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    setFieldsAndNotify(fieldValues);\n    batchStateUpdate(moveArrayAt, {\n      argA: from,\n      argB: to\n    }, fieldValues, false);\n  };\n  React.useEffect(() => {\n    inFieldArrayActionRef.current = false;\n    if (isWatchAllRef.current) {\n      formStateSubjectRef.current.next({});\n    } else {\n      for (const watchField of watchFieldsRef.current) {\n        if (name.startsWith(watchField)) {\n          formStateSubjectRef.current.next({});\n          break;\n        }\n      }\n    }\n    watchSubjectRef.current.next({\n      name,\n      formValues: getFieldsValues(fieldsRef)\n    });\n    focusNameRef.current && focusFieldBy(fieldsRef.current, key => isString(key) && key.startsWith(focusNameRef.current));\n    focusNameRef.current = '';\n    fieldArraySubjectRef.current.next({\n      name,\n      fields: omitKey([...fields])\n    });\n  }, [fields, name]);\n  React.useEffect(() => {\n    const fieldArraySubscription = fieldArraySubjectRef.current.subscribe({\n      next(_ref4) {\n        let {\n          name: inputFieldArrayName,\n          fields,\n          isReset\n        } = _ref4;\n        if (isReset) {\n          unset(fieldsRef.current, inputFieldArrayName || name);\n          inputFieldArrayName ? set(fieldArrayDefaultValuesRef.current, inputFieldArrayName, fields) : fieldArrayDefaultValuesRef.current = fields;\n          setFieldsAndNotify(get(fieldArrayDefaultValuesRef.current, name));\n        }\n      }\n    });\n    !get(fieldsRef.current, name) && set(fieldsRef.current, name, []);\n    isMountedRef.current = true;\n    return () => {\n      fieldArraySubscription.unsubscribe();\n      (shouldUnmount || shouldUnregister) && unregister(name);\n    };\n  }, []);\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend$1, [name]),\n    append: React.useCallback(append$1, [name]),\n    remove: React.useCallback(remove, [name]),\n    insert: React.useCallback(insert$1, [name]),\n    fields: fields\n  };\n};\nfunction getFields(fieldsNames, fieldsRefs) {\n  const currentFields = {};\n  for (const name of fieldsNames) {\n    const field = get(fieldsRefs, name);\n    if (field) {\n      !isKey(name) ? set(currentFields, name, field._f) : currentFields[name] = field._f;\n    }\n  }\n  return currentFields;\n}\nvar isFileInput = element => element.type === 'file';\nvar isMultipleSelect = element => element.type === \"select-multiple\";\nvar isRadioInput = element => element.type === 'radio';\nconst defaultResult = {\n  value: false,\n  isValid: false\n};\nconst validResult = {\n  value: true,\n  isValid: true\n};\nvar getCheckboxValue = options => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options.filter(option => option && option.checked && !option.disabled).map(option => option.value);\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n    return options[0].checked && !options[0].disabled ?\n    // @ts-expect-error expected to work in the browser\n    options[0].attributes && !isUndefined(options[0].attributes.value) ? isUndefined(options[0].value) || options[0].value === '' ? validResult : {\n      value: options[0].value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n  return defaultResult;\n};\nvar getFieldValueAs = (value, _ref5) => {\n  let {\n    valueAsNumber,\n    valueAsDate,\n    setValueAs\n  } = _ref5;\n  return isUndefined(value) ? value : valueAsNumber ? value === '' ? NaN : +value : valueAsDate ? new Date(value) : setValueAs ? setValueAs(value) : value;\n};\nvar getMultipleSelectValue = options => [...options].filter(_ref6 => {\n  let {\n    selected\n  } = _ref6;\n  return selected;\n}).map(_ref7 => {\n  let {\n    value\n  } = _ref7;\n  return value;\n});\nconst defaultReturn = {\n  isValid: false,\n  value: null\n};\nvar getRadioValue = options => Array.isArray(options) ? options.reduce((previous, option) => option && option.checked && !option.disabled ? {\n  isValid: true,\n  value: option.value\n} : previous, defaultReturn) : defaultReturn;\nfunction getFieldValue(field) {\n  if (field && field._f) {\n    const ref = field._f.ref;\n    if (ref.disabled) {\n      return;\n    }\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n    if (isRadioInput(ref)) {\n      return getRadioValue(field._f.refs).value;\n    }\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n    if (isCheckBoxInput(ref)) {\n      return getCheckboxValue(field._f.refs).value;\n    }\n    return getFieldValueAs(isUndefined(ref.value) ? field._f.ref.value : ref.value, field._f);\n  }\n}\nvar hasValidation = (options, mounted) => mounted && options && (options.required || options.min || options.max || options.maxLength || options.minLength || options.pattern || options.validate);\nvar skipValidation = _ref8 => {\n  let {\n    isOnBlur,\n    isOnChange,\n    isOnTouch,\n    isTouched,\n    isReValidateOnBlur,\n    isReValidateOnChange,\n    isBlurEvent,\n    isSubmitted,\n    isOnAll\n  } = _ref8;\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\nvar isFunction = value => typeof value === 'function';\nvar isMessage = value => isString(value) || React.isValidElement(value);\nvar isRegex = value => value instanceof RegExp;\nfunction getValidateError(result, ref) {\n  let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'validate';\n  if (isMessage(result) || Array.isArray(result) && result.every(isMessage) || isBoolean(result) && !result) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref\n    };\n  }\n}\nvar getValueAndMessage = validationData => isObject(validationData) && !isRegex(validationData) ? validationData : {\n  value: validationData,\n  message: ''\n};\nvar validateField = async (_ref9, validateAllFieldCriteria) => {\n  let {\n    _f: {\n      ref,\n      refs,\n      required,\n      maxLength,\n      minLength,\n      min,\n      max,\n      pattern,\n      validate,\n      name,\n      value: inputValue,\n      valueAsNumber,\n      mount\n    }\n  } = _ref9;\n  if (!mount) {\n    return {};\n  }\n  const error = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = (valueAsNumber || isFileInput(ref)) && !ref.value || inputValue === '' || Array.isArray(inputValue) && !inputValue.length;\n  const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n  const getMinMaxMessage = function (exceedMax, maxLengthMessage, minLengthMessage) {\n    let maxType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : INPUT_VALIDATION_RULES.maxLength;\n    let minType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : INPUT_VALIDATION_RULES.minLength;\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = Object.assign({\n      type: exceedMax ? maxType : minType,\n      message,\n      ref\n    }, appendErrorsCurry(exceedMax ? maxType : minType, message));\n  };\n  if (required && (!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(inputValue)) || isBoolean(inputValue) && !inputValue || isCheckBox && !getCheckboxValue(refs).isValid || isRadio && !getRadioValue(refs).isValid)) {\n    const {\n      value,\n      message\n    } = isMessage(required) ? {\n      value: !!required,\n      message: required\n    } : getValueAndMessage(required);\n    if (value) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox ? (refs || [])[0] || {} : ref\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n  if ((!isNullOrUndefined(min) || !isNullOrUndefined(max)) && inputValue !== '') {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n    if (!isNaN(inputValue)) {\n      const valueNumber = ref.valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate = ref.valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n  if (isString(inputValue) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax = !isNullOrUndefined(maxLengthOutput.value) && inputValue.length > maxLengthOutput.value;\n    const exceedMin = !isNullOrUndefined(minLengthOutput.value) && inputValue.length < minLengthOutput.value;\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n  if (isString(inputValue) && pattern && !isEmpty) {\n    const {\n      value: patternValue,\n      message\n    } = getValueAndMessage(pattern);\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message));\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n  if (validate) {\n    const validateRef = isRadioOrCheckbox && refs ? refs[0] : ref;\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, validateRef);\n      if (validateError) {\n        error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {};\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n        const validateResult = await validateFunction(inputValue);\n        const validateError = getValidateError(validateResult, validateRef, key);\n        if (validateError) {\n          validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n      if (!isEmptyObject(validationResult)) {\n        error[name] = Object.assign({\n          ref: validateRef\n        }, validationResult);\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n  return error;\n};\nvar getValidationModes = mode => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched\n});\nvar isHTMLElement = value => value instanceof HTMLElement;\nvar isRadioOrCheckboxFunction = ref => isRadioInput(ref) || isCheckBoxInput(ref);\nclass Subscription {\n  constructor() {\n    this.tearDowns = [];\n  }\n  add(tearDown) {\n    this.tearDowns.push(tearDown);\n  }\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\nclass Subscriber {\n  constructor(observer, subscription) {\n    this.observer = observer;\n    this.closed = false;\n    subscription.add(() => this.closed = true);\n  }\n  next(value) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\nclass Subject {\n  constructor() {\n    this.observers = [];\n  }\n  next(value) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n  subscribe(observer) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n    return subscription;\n  }\n  unsubscribe() {\n    this.observers = [];\n  }\n}\nconst isWindowUndefined = typeof window === 'undefined';\nfunction useForm() {\n  let {\n    mode = VALIDATION_MODE.onSubmit,\n    reValidateMode = VALIDATION_MODE.onChange,\n    resolver,\n    context,\n    defaultValues = {},\n    shouldFocusError = true,\n    shouldUnregister,\n    criteriaMode\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const fieldsRef = React.useRef({});\n  const fieldsNamesRef = React.useRef(new Set());\n  const formStateSubjectRef = React.useRef(new Subject());\n  const unregisterFieldsNamesRef = React.useRef(new Set());\n  const watchSubjectRef = React.useRef(new Subject());\n  const controllerSubjectRef = React.useRef(new Subject());\n  const fieldArraySubjectRef = React.useRef(new Subject());\n  const fieldArrayDefaultValuesRef = React.useRef({});\n  const inFieldArrayActionRef = React.useRef(false);\n  const watchFieldsRef = React.useRef(new Set());\n  const isMountedRef = React.useRef(false);\n  const fieldsWithValidationRef = React.useRef({});\n  const validFieldsRef = React.useRef({});\n  const defaultValuesRef = React.useRef(defaultValues);\n  const isWatchAllRef = React.useRef(false);\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef(new Set());\n  const validationMode = getValidationModes(mode);\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, updateFormState] = React.useState({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !validationMode.isOnSubmit,\n    errors: {}\n  });\n  const readFormStateRef = React.useRef({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touchedFields: !isProxyEnabled,\n    isValidating: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n    errors: !isProxyEnabled\n  });\n  const formStateRef = React.useRef(formState);\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  const getIsValid = () => {\n    formStateRef.current.isValid = deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) && isEmptyObject(formStateRef.current.errors);\n    return formStateRef.current.isValid;\n  };\n  const shouldRenderBaseOnError = React.useCallback(function (name, error) {\n    let shouldRender = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let state = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let isValid = arguments.length > 4 ? arguments[4] : undefined;\n    let isWatched = arguments.length > 5 ? arguments[5] : undefined;\n    const previousError = get(formStateRef.current.errors, name);\n    if (error) {\n      unset(validFieldsRef.current, name);\n      set(formStateRef.current.errors, name, error);\n    } else {\n      (get(fieldsWithValidationRef.current, name) || resolverRef.current) && set(validFieldsRef.current, name, true);\n      unset(formStateRef.current.errors, name);\n    }\n    if ((shouldRender || isWatched || (error ? !deepEqual(previousError, error, true) : previousError) || !isEmptyObject(state) || readFormStateRef.current.isValid && formStateRef.current.isValid !== (resolverRef.current ? !!isValid : getIsValid())) && !isNullOrUndefined(shouldRender)) {\n      const updatedFormState = Object.assign(Object.assign({}, state), {\n        isValid: resolverRef.current ? !!isValid : getIsValid(),\n        errors: formStateRef.current.errors,\n        name\n      });\n      formStateRef.current = Object.assign(Object.assign({}, formStateRef.current), updatedFormState);\n      formStateSubjectRef.current.next(isWatched ? {\n        name\n      } : updatedFormState);\n    }\n    formStateSubjectRef.current.next({\n      isValidating: false\n    });\n  }, []);\n  const setFieldValue = React.useCallback(function (name, rawValue) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let shouldRender = arguments.length > 3 ? arguments[3] : undefined;\n    let shouldRegister = arguments.length > 4 ? arguments[4] : undefined;\n    shouldRegister && register(name);\n    const field = get(fieldsRef.current, name);\n    if (field) {\n      const _f = field._f;\n      if (_f) {\n        const value = isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(rawValue) ? '' : rawValue;\n        _f.value = getFieldValueAs(rawValue, _f);\n        if (isRadioInput(_f.ref)) {\n          (_f.refs || []).forEach(radioRef => radioRef.checked = radioRef.value === value);\n        } else if (isFileInput(_f.ref) && !isString(value)) {\n          _f.ref.files = value;\n        } else if (isMultipleSelect(_f.ref)) {\n          [..._f.ref.options].forEach(selectRef => selectRef.selected = value.includes(selectRef.value));\n        } else if (isCheckBoxInput(_f.ref) && _f.refs) {\n          _f.refs.length > 1 ? _f.refs.forEach(checkboxRef => checkboxRef.checked = Array.isArray(value) ? !!value.find(data => data === checkboxRef.value) : value === checkboxRef.value) : _f.refs[0].checked = !!value;\n        } else {\n          _f.ref.value = value;\n        }\n        if (shouldRender) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, name, rawValue);\n          controllerSubjectRef.current.next({\n            values: Object.assign(Object.assign({}, defaultValuesRef.current), values),\n            name\n          });\n        }\n        options.shouldDirty && updateAndGetDirtyState(name, value);\n        options.shouldValidate && trigger(name);\n      } else {\n        field._f = {\n          ref: {\n            name,\n            value: rawValue\n          },\n          value: rawValue\n        };\n      }\n    }\n  }, []);\n  const getIsDirty = React.useCallback((name, data) => {\n    const formValues = getFieldsValues(fieldsRef);\n    name && data && set(formValues, name, data);\n    return !deepEqual(formValues, defaultValuesRef.current);\n  }, []);\n  const updateAndGetDirtyState = React.useCallback(function (name, inputValue) {\n    let shouldRender = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    if (readFormStateRef.current.isDirty || readFormStateRef.current.dirtyFields) {\n      const isFieldDirty = !deepEqual(get(defaultValuesRef.current, name), inputValue);\n      const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n      const previousIsDirty = formStateRef.current.isDirty;\n      isFieldDirty ? set(formStateRef.current.dirtyFields, name, true) : unset(formStateRef.current.dirtyFields, name);\n      formStateRef.current.isDirty = getIsDirty();\n      const state = {\n        isDirty: formStateRef.current.isDirty,\n        dirtyFields: formStateRef.current.dirtyFields,\n        name\n      };\n      const isChanged = readFormStateRef.current.isDirty && previousIsDirty !== state.isDirty || readFormStateRef.current.dirtyFields && isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name);\n      isChanged && shouldRender && formStateSubjectRef.current.next(state);\n      return isChanged ? state : {};\n    }\n    return {};\n  }, []);\n  const executeValidation = React.useCallback(async (name, skipReRender) => {\n    const error = (await validateField(get(fieldsRef.current, name), isValidateAllFieldCriteria))[name];\n    shouldRenderBaseOnError(name, error, skipReRender);\n    return isUndefined(error);\n  }, [isValidateAllFieldCriteria]);\n  const executeSchemaOrResolverValidation = React.useCallback(async function (names) {\n    let currentNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    const {\n      errors\n    } = await resolverRef.current(getFieldsValues(fieldsRef), contextRef.current, {\n      criteriaMode,\n      names: currentNames,\n      fields: getFields(fieldsNamesRef.current, fieldsRef.current)\n    });\n    for (const name of names) {\n      const error = get(errors, name);\n      error ? set(formStateRef.current.errors, name, error) : unset(formStateRef.current.errors, name);\n    }\n    return errors;\n  }, [criteriaMode]);\n  const validateForm = async fieldsRef => {\n    for (const name in fieldsRef) {\n      const field = fieldsRef[name];\n      if (field) {\n        const _f = field._f;\n        const current = omit(field, '_f');\n        if (_f) {\n          const fieldError = await validateField(field, isValidateAllFieldCriteria);\n          if (fieldError[_f.name]) {\n            set(formStateRef.current.errors, _f.name, fieldError[_f.name]);\n            unset(validFieldsRef.current, _f.name);\n          } else if (get(fieldsWithValidationRef.current, _f.name)) {\n            set(validFieldsRef.current, _f.name, true);\n            unset(formStateRef.current.errors, _f.name);\n          }\n        }\n        current && (await validateForm(current));\n      }\n    }\n  };\n  const trigger = React.useCallback(async function (name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const fieldNames = isUndefined(name) ? Object.keys(fieldsRef.current) : convertToArrayPayload(name);\n    let isValid;\n    let schemaResult = {};\n    formStateSubjectRef.current.next({\n      isValidating: true\n    });\n    if (resolverRef.current) {\n      schemaResult = await executeSchemaOrResolverValidation(fieldNames, isUndefined(name) ? undefined : fieldNames);\n      isValid = fieldNames.every(name => !get(schemaResult, name));\n    } else {\n      if (isUndefined(name)) {\n        await validateForm(fieldsRef.current);\n        isValid = isEmptyObject(formStateRef.current.errors);\n      } else {\n        isValid = (await Promise.all(fieldNames.filter(fieldName => get(fieldsRef.current, fieldName)).map(async fieldName => await executeValidation(fieldName, null)))).every(Boolean);\n      }\n    }\n    formStateSubjectRef.current.next(Object.assign(Object.assign({}, isString(name) ? {\n      name\n    } : {}), {\n      errors: formStateRef.current.errors,\n      isValidating: false,\n      isValid: resolverRef.current ? isEmptyObject(schemaResult) : getIsValid()\n    }));\n    if (!isValid && options.shouldFocus) {\n      focusFieldBy(fieldsRef.current, key => get(formStateRef.current.errors, key), fieldNames);\n    }\n    return isValid;\n  }, [executeSchemaOrResolverValidation, executeValidation]);\n  const setInternalValues = React.useCallback((name, value, options) => Object.entries(value).forEach(_ref0 => {\n    let [inputKey, inputValue] = _ref0;\n    const fieldName = \"\".concat(name, \".\").concat(inputKey);\n    const field = get(fieldsRef.current, fieldName);\n    const isFieldArray = fieldArrayNamesRef.current.has(name);\n    isFieldArray || !isPrimitive(inputValue) || field && !field._f ? setInternalValues(fieldName, inputValue, options) : setFieldValue(fieldName, inputValue, options, true, !field);\n  }), [trigger]);\n  const isFieldWatched = name => isWatchAllRef.current || watchFieldsRef.current.has(name) || watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n  const updateValidAndValue = (name, options, ref, isWithinRefCallback) => {\n    const field = get(fieldsRef.current, name);\n    const defaultValue = isUndefined(field._f.value) ? get(defaultValuesRef.current, name) : field._f.value;\n    if (field && !isUndefined(defaultValue)) {\n      if (ref && ref.defaultChecked) {\n        field._f.value = getFieldValue(field);\n      } else if (!isNameInFieldArray(fieldArrayNamesRef.current, name)) {\n        setFieldValue(name, defaultValue);\n      } else {\n        field._f.value = defaultValue;\n      }\n    } else {\n      field._f.value = getFieldValue(field);\n    }\n    if ((!isUndefined(defaultValue) || isWithinRefCallback) && hasValidation(options, field._f.mount) && !validationMode.isOnSubmit && field && readFormStateRef.current.isValid) {\n      validateField(field, isValidateAllFieldCriteria).then(error => {\n        isEmptyObject(error) ? set(validFieldsRef.current, name, true) : unset(validFieldsRef.current, name);\n        formStateRef.current.isValid !== getIsValid() && updateFormState(Object.assign(Object.assign({}, formStateRef.current), {\n          isValid: getIsValid()\n        }));\n      });\n    }\n    return defaultValue;\n  };\n  const setValue = function (name, value) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const field = get(fieldsRef.current, name);\n    const isFieldArray = fieldArrayNamesRef.current.has(name);\n    if (isFieldArray) {\n      fieldArraySubjectRef.current.next({\n        fields: value,\n        name,\n        isReset: true\n      });\n      if ((readFormStateRef.current.isDirty || readFormStateRef.current.dirtyFields) && options.shouldDirty) {\n        set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(value, get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\n        formStateSubjectRef.current.next({\n          name,\n          dirtyFields: formStateRef.current.dirtyFields,\n          isDirty: getIsDirty(name, value)\n        });\n      }\n      !value.length && set(fieldsRef.current, name, []) && set(fieldArrayDefaultValuesRef.current, name, []);\n    }\n    (field && !field._f || isFieldArray) && !isNullOrUndefined(value) ? setInternalValues(name, value, isFieldArray ? {} : options) : setFieldValue(name, value, options, true, !field);\n    isFieldWatched(name) && formStateSubjectRef.current.next({});\n    watchSubjectRef.current.next({\n      name,\n      formValues: getValues()\n    });\n  };\n  const handleChange = React.useCallback(async _ref1 => {\n    let {\n      type,\n      target,\n      target: {\n        value,\n        type: inputType\n      }\n    } = _ref1;\n    let name = target.name;\n    let error;\n    let isValid;\n    const field = get(fieldsRef.current, name);\n    if (field) {\n      let inputValue = inputType ? getFieldValue(field) : undefined;\n      inputValue = isUndefined(inputValue) ? value : inputValue;\n      const isBlurEvent = type === EVENTS.BLUR;\n      const {\n        isOnBlur: isReValidateOnBlur,\n        isOnChange: isReValidateOnChange\n      } = getValidationModes(reValidateMode);\n      const shouldSkipValidation = !hasValidation(field._f, field._f.mount) && !resolverRef.current && !get(formStateRef.current.errors, name) || skipValidation(Object.assign({\n        isBlurEvent,\n        isTouched: !!get(formStateRef.current.touchedFields, name),\n        isSubmitted: formStateRef.current.isSubmitted,\n        isReValidateOnBlur,\n        isReValidateOnChange\n      }, validationMode));\n      const isWatched = !isBlurEvent && isFieldWatched(name);\n      if (!isUndefined(inputValue)) {\n        field._f.value = inputValue;\n      }\n      const state = updateAndGetDirtyState(name, field._f.value, false);\n      if (isBlurEvent && !get(formStateRef.current.touchedFields, name)) {\n        set(formStateRef.current.touchedFields, name, true);\n        readFormStateRef.current.touchedFields && (state.touchedFields = formStateRef.current.touchedFields);\n      }\n      let shouldRender = !isEmptyObject(state) || isWatched;\n      if (shouldSkipValidation) {\n        !isBlurEvent && watchSubjectRef.current.next({\n          name,\n          type,\n          formValues: getValues()\n        });\n        return shouldRender && formStateSubjectRef.current.next(isWatched ? {\n          name\n        } : Object.assign(Object.assign({}, state), {\n          name\n        }));\n      }\n      formStateSubjectRef.current.next({\n        isValidating: true\n      });\n      if (resolverRef.current) {\n        const {\n          errors\n        } = await resolverRef.current(getFieldsValues(fieldsRef), contextRef.current, {\n          criteriaMode,\n          fields: getFields([name], fieldsRef.current),\n          names: [name]\n        });\n        const previousFormIsValid = formStateRef.current.isValid;\n        error = get(errors, name);\n        if (isCheckBoxInput(target) && !error) {\n          const parentNodeName = getNodeParentName(name);\n          const currentError = get(errors, parentNodeName, {});\n          currentError.type && currentError.message && (error = currentError);\n          if (currentError || get(formStateRef.current.errors, parentNodeName)) {\n            name = parentNodeName;\n          }\n        }\n        isValid = isEmptyObject(errors);\n        previousFormIsValid !== isValid && (shouldRender = true);\n      } else {\n        error = (await validateField(field, isValidateAllFieldCriteria))[name];\n      }\n      !isBlurEvent && watchSubjectRef.current.next({\n        name,\n        type,\n        formValues: getValues()\n      });\n      shouldRenderBaseOnError(name, error, shouldRender, state, isValid, isWatched);\n    }\n  }, []);\n  const getValues = fieldNames => {\n    const values = Object.assign(Object.assign({}, defaultValuesRef.current), getFieldsValues(fieldsRef));\n    return isUndefined(fieldNames) ? values : isString(fieldNames) ? get(values, fieldNames) : fieldNames.map(name => get(values, name));\n  };\n  const updateIsValid = React.useCallback(async function () {\n    let values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const previousIsValid = formStateRef.current.isValid;\n    if (resolver) {\n      const {\n        errors\n      } = await resolverRef.current(Object.assign(Object.assign({}, getFieldsValues(fieldsRef)), values), contextRef.current, {\n        criteriaMode,\n        fields: getFields(fieldsNamesRef.current, fieldsRef.current)\n      });\n      formStateRef.current.isValid = isEmptyObject(errors);\n    } else {\n      getIsValid();\n    }\n    previousIsValid !== formStateRef.current.isValid && formStateSubjectRef.current.next({\n      isValid: formStateRef.current.isValid\n    });\n  }, [criteriaMode]);\n  const clearErrors = name => {\n    name ? convertToArrayPayload(name).forEach(inputName => unset(formStateRef.current.errors, inputName)) : formStateRef.current.errors = {};\n    formStateSubjectRef.current.next({\n      errors: formStateRef.current.errors\n    });\n  };\n  const setError = (name, error, options) => {\n    const ref = ((get(fieldsRef.current, name) || {\n      _f: {}\n    })._f || {}).ref;\n    set(formStateRef.current.errors, name, Object.assign(Object.assign({}, error), {\n      ref\n    }));\n    formStateSubjectRef.current.next({\n      name,\n      errors: formStateRef.current.errors,\n      isValid: false\n    });\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n  const watchInternal = React.useCallback((fieldNames, defaultValue, isGlobal, formValues) => {\n    const isArrayNames = Array.isArray(fieldNames);\n    const fieldValues = formValues || isMountedRef.current ? Object.assign(Object.assign({}, defaultValuesRef.current), formValues || getFieldsValues(fieldsRef)) : isUndefined(defaultValue) ? defaultValuesRef.current : isArrayNames ? defaultValue : {\n      [fieldNames]: defaultValue\n    };\n    if (isUndefined(fieldNames)) {\n      isGlobal && (isWatchAllRef.current = true);\n      return fieldValues;\n    }\n    const result = [];\n    for (const fieldName of convertToArrayPayload(fieldNames)) {\n      isGlobal && watchFieldsRef.current.add(fieldName);\n      result.push(get(fieldValues, fieldName));\n    }\n    return isArrayNames ? result : result[0];\n  }, []);\n  const watch = (fieldName, defaultValue) => isFunction(fieldName) ? watchSubjectRef.current.subscribe({\n    next: info => fieldName(watchInternal(undefined, defaultValue), info)\n  }) : watchInternal(fieldName, defaultValue, true);\n  const unregister = function (name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    for (const inputName of name ? convertToArrayPayload(name) : Object.keys(fieldsNamesRef.current)) {\n      fieldsNamesRef.current.delete(inputName);\n      fieldArrayNamesRef.current.delete(inputName);\n      if (get(fieldsRef.current, inputName)) {\n        if (!options.keepIsValid) {\n          unset(fieldsWithValidationRef.current, inputName);\n          unset(validFieldsRef.current, inputName);\n        }\n        !options.keepError && unset(formStateRef.current.errors, inputName);\n        !options.keepValue && unset(fieldsRef.current, inputName);\n        !options.keepDirty && unset(formStateRef.current.dirtyFields, inputName);\n        !options.keepTouched && unset(formStateRef.current.touchedFields, inputName);\n        !shouldUnregister && !options.keepDefaultValue && unset(defaultValuesRef.current, inputName);\n        watchSubjectRef.current.next({\n          name: inputName,\n          formValues: getValues()\n        });\n      }\n    }\n    formStateSubjectRef.current.next(Object.assign(Object.assign(Object.assign({}, formStateRef.current), !options.keepDirty ? {} : {\n      isDirty: getIsDirty()\n    }), resolverRef.current ? {} : {\n      isValid: getIsValid()\n    }));\n    !options.keepIsValid && updateIsValid();\n  };\n  const registerFieldRef = (name, ref, options) => {\n    register(name, options);\n    let field = get(fieldsRef.current, name);\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    if (ref === field._f.ref || isWeb && isHTMLElement(field._f.ref) && !isHTMLElement(ref) || isRadioOrCheckbox && Array.isArray(field._f.refs) && compact(field._f.refs).find(option => option === ref)) {\n      return;\n    }\n    field = {\n      _f: isRadioOrCheckbox ? Object.assign(Object.assign({}, field._f), {\n        refs: [...compact(field._f.refs || []).filter(ref => isHTMLElement(ref) && document.contains(ref)), ref],\n        ref: {\n          type: ref.type,\n          name\n        }\n      }) : Object.assign(Object.assign({}, field._f), {\n        ref\n      })\n    };\n    set(fieldsRef.current, name, field);\n    const defaultValue = updateValidAndValue(name, options, ref, true);\n    if (isRadioOrCheckbox && Array.isArray(defaultValue) ? !deepEqual(get(fieldsRef.current, name)._f.value, defaultValue) : isUndefined(get(fieldsRef.current, name)._f.value)) {\n      get(fieldsRef.current, name)._f.value = getFieldValue(get(fieldsRef.current, name));\n    }\n  };\n  const register = React.useCallback(function (name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const field = get(fieldsRef.current, name);\n    set(fieldsRef.current, name, {\n      _f: Object.assign(Object.assign(Object.assign({}, field && field._f ? field._f : {\n        ref: {\n          name\n        }\n      }), {\n        name,\n        mount: true\n      }), options)\n    });\n    hasValidation(options, true) && set(fieldsWithValidationRef.current, name, true);\n    fieldsNamesRef.current.add(name);\n    !field && updateValidAndValue(name, options);\n    return isWindowUndefined ? {\n      name: name\n    } : {\n      name,\n      onChange: handleChange,\n      onBlur: handleChange,\n      ref: ref => {\n        if (ref) {\n          registerFieldRef(name, ref, options);\n        } else {\n          const field = get(fieldsRef.current, name, {});\n          const shouldUnmount = shouldUnregister || options.shouldUnregister;\n          if (field._f) {\n            field._f.mount = false;\n            // If initial state of field element is disabled,\n            // value is not set on first \"register\"\n            // re-sync the value in when it switched to enabled\n            if (isUndefined(field._f.value)) {\n              field._f.value = field._f.ref.value;\n            }\n          }\n          if (isNameInFieldArray(fieldArrayNamesRef.current, name) ? shouldUnmount && !inFieldArrayActionRef.current : shouldUnmount) {\n            unregisterFieldsNamesRef.current.add(name);\n          }\n        }\n      }\n    };\n  }, []);\n  const handleSubmit = React.useCallback((onValid, onInvalid) => async e => {\n    if (e) {\n      e.preventDefault && e.preventDefault();\n      e.persist && e.persist();\n    }\n    let hasNoPromiseError = true;\n    let fieldValues = getFieldsValues(fieldsRef);\n    formStateSubjectRef.current.next({\n      isSubmitting: true\n    });\n    try {\n      if (resolverRef.current) {\n        const {\n          errors,\n          values\n        } = await resolverRef.current(fieldValues, contextRef.current, {\n          criteriaMode,\n          fields: getFields(fieldsNamesRef.current, fieldsRef.current)\n        });\n        formStateRef.current.errors = errors;\n        fieldValues = values;\n      } else {\n        await validateForm(fieldsRef.current);\n      }\n      if (isEmptyObject(formStateRef.current.errors) && Object.keys(formStateRef.current.errors).every(name => get(fieldValues, name))) {\n        formStateSubjectRef.current.next({\n          errors: {},\n          isSubmitting: true\n        });\n        await onValid(fieldValues, e);\n      } else {\n        onInvalid && (await onInvalid(formStateRef.current.errors, e));\n        shouldFocusError && focusFieldBy(fieldsRef.current, key => get(formStateRef.current.errors, key), fieldsNamesRef.current);\n      }\n    } catch (err) {\n      hasNoPromiseError = false;\n      throw err;\n    } finally {\n      formStateRef.current.isSubmitted = true;\n      formStateSubjectRef.current.next({\n        isSubmitted: true,\n        isSubmitting: false,\n        isSubmitSuccessful: isEmptyObject(formStateRef.current.errors) && hasNoPromiseError,\n        submitCount: formStateRef.current.submitCount + 1,\n        errors: formStateRef.current.errors\n      });\n    }\n  }, [shouldFocusError, isValidateAllFieldCriteria, criteriaMode]);\n  const resetFromState = React.useCallback((_ref10, values) => {\n    let {\n      keepErrors,\n      keepDirty,\n      keepIsSubmitted,\n      keepTouched,\n      keepDefaultValues,\n      keepIsValid,\n      keepSubmitCount\n    } = _ref10;\n    if (!keepIsValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n    formStateSubjectRef.current.next({\n      submitCount: keepSubmitCount ? formStateRef.current.submitCount : 0,\n      isDirty: keepDirty ? formStateRef.current.isDirty : keepDefaultValues ? deepEqual(values, defaultValuesRef.current) : false,\n      isSubmitted: keepIsSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: keepIsValid ? formStateRef.current.isValid : !!updateIsValid(values),\n      dirtyFields: keepDirty ? formStateRef.current.dirtyFields : {},\n      touchedFields: keepTouched ? formStateRef.current.touchedFields : {},\n      errors: keepErrors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false\n    });\n  }, []);\n  const registerAbsentFields = function (value) {\n    let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    const field = get(fieldsRef.current, name);\n    if (!field || field && !field._f) {\n      if (!field && (isPrimitive(value) || isWeb && (value instanceof FileList || value instanceof Date))) {\n        set(fieldsRef.current, name, {\n          _f: {\n            ref: {\n              name,\n              value\n            },\n            value,\n            name\n          }\n        });\n      }\n      if (Array.isArray(value) || isObject(value)) {\n        if (name && !get(fieldsRef.current, name)) {\n          set(fieldsRef.current, name, Array.isArray(value) ? [] : {});\n        }\n        for (const key in value) {\n          registerAbsentFields(value[key], name + (name ? '.' : '') + key);\n        }\n      }\n    }\n  };\n  const reset = function (values) {\n    let keepStateOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const updatedValues = values || defaultValuesRef.current;\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const name of fieldsNamesRef.current) {\n        const field = get(fieldsRef.current, name);\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs) ? field._f.refs[0] : field._f.ref;\n          try {\n            isHTMLElement(inputRef) && inputRef.closest('form').reset();\n            break;\n          } catch (_a) {}\n        }\n      }\n    }\n    !keepStateOptions.keepDefaultValues && (defaultValuesRef.current = Object.assign({}, updatedValues));\n    if (!keepStateOptions.keepValues) {\n      fieldsRef.current = {};\n      controllerSubjectRef.current.next({\n        values: Object.assign({}, updatedValues)\n      });\n      watchSubjectRef.current.next({\n        formValues: Object.assign({}, updatedValues)\n      });\n      fieldArraySubjectRef.current.next({\n        fields: Object.assign({}, updatedValues),\n        isReset: true\n      });\n    }\n    !keepStateOptions.keepDefaultValues && !shouldUnregister && registerAbsentFields(Object.assign({}, updatedValues));\n    resetFromState(keepStateOptions, values);\n  };\n  const setFocus = name => get(fieldsRef.current, name)._f.ref.focus();\n  React.useEffect(() => {\n    !shouldUnregister && registerAbsentFields(defaultValuesRef.current);\n    const formStateSubscription = formStateSubjectRef.current.subscribe({\n      next(formState) {\n        if (shouldRenderFormState(formState, readFormStateRef.current, true)) {\n          formStateRef.current = Object.assign(Object.assign({}, formStateRef.current), formState);\n          updateFormState(formStateRef.current);\n        }\n      }\n    });\n    const useFieldArraySubscription = fieldArraySubjectRef.current.subscribe({\n      next(state) {\n        if (state.fields && state.name && readFormStateRef.current.isValid) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, state.name, state.fields);\n          updateIsValid(values);\n        }\n      }\n    });\n    resolverRef.current && readFormStateRef.current.isValid && updateIsValid();\n    return () => {\n      watchSubjectRef.current.unsubscribe();\n      formStateSubscription.unsubscribe();\n      useFieldArraySubscription.unsubscribe();\n    };\n  }, []);\n  React.useEffect(() => {\n    const isLiveInDom = ref => !isHTMLElement(ref) || !document.contains(ref);\n    isMountedRef.current = true;\n    for (const name of unregisterFieldsNamesRef.current) {\n      const field = get(fieldsRef.current, name);\n      field && (field._f.refs ? field._f.refs.every(isLiveInDom) : isLiveInDom(field._f.ref)) && unregister(name);\n    }\n    unregisterFieldsNamesRef.current = new Set();\n  });\n  return {\n    control: React.useMemo(() => ({\n      register,\n      isWatchAllRef,\n      inFieldArrayActionRef,\n      watchFieldsRef,\n      getIsDirty,\n      formStateSubjectRef,\n      fieldArraySubjectRef,\n      controllerSubjectRef,\n      watchSubjectRef,\n      watchInternal,\n      fieldsRef,\n      validFieldsRef,\n      fieldsWithValidationRef,\n      fieldArrayNamesRef,\n      readFormStateRef,\n      formStateRef,\n      defaultValuesRef,\n      fieldArrayDefaultValuesRef,\n      unregister,\n      shouldUnmount: shouldUnregister\n    }), []),\n    formState: getProxyFormState(isProxyEnabled, formState, readFormStateRef),\n    trigger,\n    register,\n    handleSubmit,\n    watch: React.useCallback(watch, []),\n    setValue: React.useCallback(setValue, [setInternalValues]),\n    getValues: React.useCallback(getValues, []),\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    unregister: React.useCallback(unregister, []),\n    setError: React.useCallback(setError, []),\n    setFocus: React.useCallback(setFocus, [])\n  };\n}\nfunction useWatch(props) {\n  const {\n    control,\n    name,\n    defaultValue\n  } = props || {};\n  const methods = useFormContext();\n  const nameRef = React.useRef(name);\n  nameRef.current = name;\n  const {\n    watchInternal,\n    watchSubjectRef\n  } = control || methods.control;\n  const [value, updateValue] = React.useState(isUndefined(defaultValue) ? watchInternal(name) : defaultValue);\n  React.useEffect(() => {\n    watchInternal(name);\n    const watchSubscription = watchSubjectRef.current.subscribe({\n      next: _ref11 => {\n        let {\n          name: inputName,\n          formValues\n        } = _ref11;\n        return (!nameRef.current || !inputName || convertToArrayPayload(nameRef.current).some(fieldName => inputName && fieldName && (fieldName.startsWith(inputName) || inputName.startsWith(fieldName)))) && updateValue(watchInternal(nameRef.current, defaultValue, false, formValues));\n      }\n    });\n    return () => watchSubscription.unsubscribe();\n  }, []);\n  return value;\n}\nexport { Controller, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };","map":{"version":3,"names":["isCheckBoxInput","element","type","isNullOrUndefined","value","isObjectType","isObject","Array","isArray","Date","getControllerValue","event","target","checked","getNodeParentName","name","substring","search","isNameInFieldArray","names","some","current","compact","filter","Boolean","isUndefined","val","undefined","get","obj","path","defaultValue","result","split","reduce","key","EVENTS","BLUR","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","max","min","maxLength","minLength","pattern","required","validate","omit","source","copy","Object","assign","FormContext","React","createContext","displayName","useFormContext","useContext","FormProvider","props","createElement","Provider","children","getProxyFormState","isProxyEnabled","formState","readFormStateRef","localReadFormStateRef","isRoot","arguments","length","Proxy","prop","isEmptyObject","keys","shouldRenderFormState","formStateData","find","convertToArrayPayload","isWeb","window","HTMLElement","document","useFormState","control","methods","formStateRef","formStateSubjectRef","nameRef","useRef","updateFormState","useState","readFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","useEffect","formStateSubscription","subscribe","next","includes","unsubscribe","useController","_ref","rules","shouldUnregister","defaultValuesRef","register","fieldsRef","unregister","fieldArrayNamesRef","controllerSubjectRef","shouldUnmount","inFieldArrayActionRef","ref","isFieldArray","setInputStateValue","_f","field","controllerSubscription","data","values","shouldUnmountField","mount","elm","fieldState","invalid","isTouched","error","Controller","render","appendErrors","validateAllFieldCriteria","message","types","isKey","test","stringToPath","input","replace","set","object","index","tempPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","callback","fieldsNames","focus","refs","getFieldsValues","output","disabled","every","generateId","d","performance","now","c","r","Math","random","toString","mapIds","keyName","map","isPrimitive","deepEqual","object1","object2","isErrorObject","isValidElement","keys1","keys2","val1","val2","deepMerge","targetValue","sourceValue","_a","setDirtyFields","defaultValues","parentNode","parentName","setFieldArrayDirtyFields","slice","append","fillEmptyArray","fill","insert","isString","moveArrayAt","from","to","splice","prepend","removeAtIndexes","indexes","i","temp","removeArrayAt","sort","a","b","swapArrayAt","indexA","indexB","isBoolean","baseGet","updatePath","unset","childObject","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","useFieldArray","_ref2","focusNameRef","isMountedRef","isWatchAllRef","watchFieldsRef","getIsDirty","watchSubjectRef","fieldArraySubjectRef","validFieldsRef","fieldsWithValidationRef","fieldArrayDefaultValuesRef","setFields","add","omitKey","getCurrentFieldsValues","getFocusDetail","options","focusIndex","concat","focusName","shouldFocus","resetFields","forEach","currentIndex","setFieldsAndNotify","fieldsValues","cleanup","updateDirtyFieldsWithDefaultValues","updatedFieldArrayValues","batchStateUpdate","method","args","shouldSet","argA","argB","registerFieldArray","appendValueItem","valueIndex","entries","_ref3","inputName","append$1","appendValue","prepend$1","prependValue","remove","insert$1","insertValue","swap","fieldValues","move","watchField","startsWith","formValues","fieldArraySubscription","_ref4","inputFieldArrayName","isReset","useCallback","getFields","fieldsRefs","currentFields","isFileInput","isMultipleSelect","isRadioInput","defaultResult","validResult","getCheckboxValue","option","attributes","getFieldValueAs","_ref5","valueAsNumber","valueAsDate","setValueAs","NaN","getMultipleSelectValue","_ref6","selected","_ref7","defaultReturn","getRadioValue","previous","getFieldValue","files","hasValidation","mounted","skipValidation","_ref8","isOnBlur","isOnChange","isOnTouch","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","isFunction","isMessage","isRegex","RegExp","getValidateError","getValueAndMessage","validationData","validateField","_ref9","inputValue","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueNumber","parseFloat","valueDate","maxLengthOutput","minLengthOutput","patternValue","match","validateRef","validateError","validationResult","validateFunction","validateResult","getValidationModes","mode","isOnSubmit","isHTMLElement","isRadioOrCheckboxFunction","Subscription","constructor","tearDowns","tearDown","push","teardown","Subscriber","observer","subscription","closed","Subject","observers","subscriber","isWindowUndefined","useForm","reValidateMode","resolver","context","shouldFocusError","criteriaMode","fieldsNamesRef","Set","unregisterFieldsNamesRef","contextRef","resolverRef","validationMode","isValidateAllFieldCriteria","submitCount","isSubmitting","isSubmitSuccessful","getIsValid","shouldRenderBaseOnError","shouldRender","state","isWatched","previousError","updatedFormState","setFieldValue","rawValue","shouldRegister","radioRef","selectRef","checkboxRef","shouldDirty","updateAndGetDirtyState","shouldValidate","trigger","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","executeSchemaOrResolverValidation","currentNames","validateForm","fieldError","fieldNames","schemaResult","Promise","fieldName","setInternalValues","_ref0","inputKey","has","isFieldWatched","updateValidAndValue","isWithinRefCallback","defaultChecked","then","setValue","getValues","handleChange","_ref1","inputType","shouldSkipValidation","previousFormIsValid","parentNodeName","currentError","updateIsValid","previousIsValid","clearErrors","setError","watchInternal","isGlobal","isArrayNames","watch","info","delete","keepIsValid","keepError","keepValue","keepDirty","keepTouched","keepDefaultValue","registerFieldRef","contains","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","err","resetFromState","_ref10","keepErrors","keepIsSubmitted","keepDefaultValues","keepSubmitCount","registerAbsentFields","FileList","reset","keepStateOptions","updatedValues","keepValues","inputRef","closest","setFocus","useFieldArraySubscription","isLiveInDom","useMemo","useWatch","updateValue","watchSubscription","_ref11"],"sources":["../src/utils/isCheckBoxInput.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/logic/getControllerValue.ts","../src/logic/getNodeParentName.ts","../src/logic/isNameInFieldArray.ts","../src/utils/compact.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/constants.ts","../src/utils/omit.ts","../src/useFormContext.tsx","../src/logic/getProxyFormState.ts","../src/utils/isEmptyObject.ts","../src/logic/shouldRenderFormState.ts","../src/utils/convertToArrayPayload.ts","../src/utils/isWeb.ts","../src/utils/isProxyEnabled.ts","../src/useFormState.ts","../src/useController.ts","../src/controller.tsx","../src/logic/appendErrors.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/focusFieldBy.ts","../src/logic/getFieldsValues.ts","../src/logic/generateId.ts","../src/logic/mapId.ts","../src/utils/isPrimitive.ts","../src/utils/deepEqual.ts","../src/utils/deepMerge.ts","../src/logic/setFieldArrayDirtyFields.ts","../src/utils/append.ts","../src/utils/fillEmptyArray.ts","../src/utils/insert.ts","../src/utils/isString.ts","../src/utils/move.ts","../src/utils/prepend.ts","../src/utils/remove.ts","../src/utils/swap.ts","../src/utils/isBoolean.ts","../src/utils/unset.ts","../src/useFieldArray.ts","../src/logic/getFields.ts","../src/utils/isFileInput.ts","../src/utils/isMultipleSelect.ts","../src/utils/isRadioInput.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValueAs.ts","../src/logic/getMultipleSelectValue.ts","../src/logic/getRadioValue.ts","../src/logic/getFieldValue.ts","../src/logic/hasValidation.ts","../src/logic/skipValidation.ts","../src/utils/isFunction.ts","../src/utils/isMessage.ts","../src/utils/isRegex.ts","../src/logic/getValidateError.ts","../src/logic/getValueAndMessage.ts","../src/logic/validateField.ts","../src/utils/getValidationModes.ts","../src/utils/isHTMLElement.ts","../src/utils/isRadioOrCheckbox.ts","../src/utils/Subject.ts","../src/useForm.ts","../src/useWatch.ts"],"sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T extends unknown>(\n  obj: T,\n  path: string,\n  defaultValue?: unknown,\n) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst FormContext = React.createContext<UseFormReturn | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(FormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>(\n  props: FormProviderProps<TFieldValues>,\n) => (\n  <FormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </FormContext.Provider>\n);\n","import * as React from 'react';\n\nimport { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  isProxyEnabled: boolean,\n  formState: FormState<TFieldValues>,\n  readFormStateRef: React.MutableRefObject<ReadFormState>,\n  localReadFormStateRef?: React.MutableRefObject<ReadFormState>,\n  isRoot = true,\n) =>\n  isProxyEnabled\n    ? new Proxy(formState, {\n        get: (obj, prop: keyof FormStateProxy) => {\n          if (prop in obj) {\n            if (readFormStateRef.current[prop] !== VALIDATION_MODE.all) {\n              readFormStateRef.current[prop] = isRoot\n                ? VALIDATION_MODE.all\n                : true;\n            }\n            localReadFormStateRef &&\n              (localReadFormStateRef.current[prop] = true);\n            return obj[prop];\n          }\n\n          return undefined;\n        },\n      })\n    : formState;\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  readFormStateRef: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(readFormStateRef).length ||\n    Object.keys(formState).find(\n      (key) =>\n        readFormStateRef[key as keyof ReadFormState] ===\n        (isRoot ? VALIDATION_MODE.all : true),\n    )\n  );\n};\n","export default <T extends unknown>(value: T) =>\n  Array.isArray(value) ? value : [value];\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import isWeb from './isWeb';\n\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== 'undefined';\n\nexport default isProxyEnabled;\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport {\n  FieldValues,\n  FormState,\n  InternalFieldName,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const { control, name } = props || {};\n  const methods = useFormContext();\n  const { formStateRef, formStateSubjectRef, readFormStateRef } =\n    control || methods.control;\n  const nameRef = React.useRef<InternalFieldName>(name as InternalFieldName);\n  nameRef.current = name as InternalFieldName;\n\n  const [formState, updateFormState] = React.useState(formStateRef.current);\n  const readFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n\n  React.useEffect(() => {\n    const formStateSubscription = formStateSubjectRef.current.subscribe({\n      next: (formState) =>\n        (!nameRef.current ||\n          !formState.name ||\n          convertToArrayPayload(nameRef.current).includes(formState.name)) &&\n        shouldRenderFormState(formState, readFormState.current) &&\n        updateFormState({\n          ...formStateRef.current,\n          ...formState,\n        }),\n    });\n\n    return () => formStateSubscription.unsubscribe();\n  }, []);\n\n  return getProxyFormState<TFieldValues>(\n    isProxyEnabled,\n    formState as FormState<TFieldValues>,\n    readFormStateRef,\n    readFormState,\n    false,\n  );\n}\n\nexport { useFormState };\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport isUndefined from './utils/isUndefined';\nimport { EVENTS } from './constants';\nimport {\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>({\n  name,\n  rules,\n  defaultValue,\n  control,\n  shouldUnregister,\n}: UseControllerProps<TFieldValues, TName>): UseControllerReturn<\n  TFieldValues,\n  TName\n> {\n  const methods = useFormContext<TFieldValues>();\n  const {\n    defaultValuesRef,\n    register,\n    fieldsRef,\n    unregister,\n    fieldArrayNamesRef,\n    controllerSubjectRef,\n    shouldUnmount,\n    inFieldArrayActionRef,\n  } = control || methods.control;\n\n  const { onChange, onBlur, ref } = register(name, rules);\n  const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const [value, setInputStateValue] = React.useState(\n    isUndefined(get(fieldsRef.current, name)._f.value) || isFieldArray\n      ? isUndefined(defaultValue)\n        ? get(defaultValuesRef.current, name)\n        : defaultValue\n      : get(fieldsRef.current, name)._f.value,\n  );\n  const formState = useFormState({\n    control: control || methods.control,\n    name,\n  });\n  const field = get(fieldsRef.current, name);\n  field._f.value = value;\n\n  React.useEffect(() => {\n    const controllerSubscription = controllerSubjectRef.current.subscribe({\n      next: (data) =>\n        (!data.name || name === data.name) &&\n        setInputStateValue(get(data.values, name)),\n    });\n\n    return () => {\n      controllerSubscription.unsubscribe();\n      const shouldUnmountField = shouldUnmount || shouldUnregister;\n\n      if (\n        isFieldArray\n          ? shouldUnmountField && !inFieldArrayActionRef.current\n          : shouldUnmountField\n      ) {\n        unregister(name);\n      } else if (get(fieldsRef.current, name)) {\n        get(fieldsRef.current, name)._f.mount = false;\n      }\n    };\n  }, [name]);\n\n  return {\n    field: {\n      onChange: (event: any) => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n\n        onChange({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        onBlur({\n          target: {\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => elm && ref(elm),\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import * as React from 'react';\n\nimport { FieldRefs, FieldValues } from '../types';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\n\nconst getFieldsValues = (\n  fieldsRef: React.MutableRefObject<FieldRefs>,\n  output: FieldValues = {},\n): any => {\n  for (const name in fieldsRef.current) {\n    const field = fieldsRef.current[name];\n\n    if (field && !isNullOrUndefined(output)) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      set(\n        output,\n        name,\n        _f && _f.ref\n          ? _f.ref.disabled || (_f.refs && _f.refs.every((ref) => ref.disabled))\n            ? undefined\n            : _f.value\n          : Array.isArray(field)\n          ? []\n          : {},\n      );\n\n      current &&\n        getFieldsValues(\n          {\n            current,\n          },\n          output[name],\n        );\n    }\n  }\n\n  return output;\n};\n\nexport default getFieldsValues;\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldValues } from '../types';\n\nimport generateId from './generateId';\n\nexport default <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id',\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): any =>\n  values.map((value: Partial<TFieldArrayValues>) => ({\n    [keyName]: (value && value[keyName]) || generateId(),\n    ...value,\n  }));\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import * as React from 'react';\n\nimport isObject from '../utils/isObject';\n\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function append<T>(data: T[], value: T | T[]): T[] {\n  return [...data, ...convertToArrayPayload(value)];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function prepend<T>(data: T[], value: T | T[]): T[] {\n  return [...convertToArrayPayload(value), ...data];\n}\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  data[indexA] = [data[indexB], (data[indexB] = data[indexA])][0];\n};\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldArrayParentName from './logic/getNodeParentName';\nimport mapIds from './logic/mapId';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport appendAt from './utils/append';\nimport compact from './utils/compact';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport isPrimitive from './utils/isPrimitive';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport moveArrayAt from './utils/move';\nimport omit from './utils/omit';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport unset from './utils/unset';\nimport {\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldErrors,\n  FieldPath,\n  FieldValues,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nexport const useFieldArray = <\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n  shouldUnregister,\n}: UseFieldArrayProps<\n  TFieldValues,\n  TFieldArrayName,\n  TKeyName\n>): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> => {\n  const methods = useFormContext();\n  const focusNameRef = React.useRef('');\n  const isMountedRef = React.useRef(false);\n  const {\n    isWatchAllRef,\n    watchFieldsRef,\n    getIsDirty,\n    watchSubjectRef,\n    fieldArraySubjectRef,\n    fieldArrayNamesRef,\n    fieldsRef,\n    defaultValuesRef,\n    formStateRef,\n    formStateSubjectRef,\n    readFormStateRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValuesRef,\n    unregister,\n    shouldUnmount,\n    inFieldArrayActionRef,\n  } = control || methods.control;\n\n  const [fields, setFields] = React.useState<\n    Partial<FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>>[]\n  >(\n    mapIds(\n      get(fieldsRef.current, name) && isMountedRef.current\n        ? get(getFieldsValues(fieldsRef), name)\n        : get(fieldArrayDefaultValuesRef.current, getFieldArrayParentName(name))\n        ? get(fieldArrayDefaultValuesRef.current, name, [])\n        : get(defaultValuesRef.current, name, []),\n      keyName,\n    ),\n  );\n\n  set(fieldArrayDefaultValuesRef.current, name, [...fields]);\n  fieldArrayNamesRef.current.add(name);\n\n  const omitKey = <\n    T extends Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[],\n  >(\n    fields: T,\n  ) =>\n    fields.map((field) =>\n      omit((field || {}) as Record<TKeyName, any>, keyName),\n    );\n\n  const getCurrentFieldsValues = () => {\n    const values = get(getFieldsValues(fieldsRef), name, []);\n\n    return mapIds<TFieldValues, TKeyName>(\n      get(fieldArrayDefaultValuesRef.current, name, []).map(\n        (item: Partial<TFieldValues>, index: number) => ({\n          ...item,\n          ...values[index],\n        }),\n      ),\n      keyName,\n    );\n  };\n\n  const getFocusDetail = (\n    index: number,\n    options?: FieldArrayMethodProps,\n  ): string =>\n    options\n      ? !isUndefined(options.focusIndex)\n        ? `${name}.${options.focusIndex}`\n        : options.focusName\n        ? options.focusName\n        : !options.shouldFocus\n        ? ''\n        : `${name}.${index}`\n      : `${name}.${index}`;\n\n  const resetFields = <T>(index?: T) =>\n    convertToArrayPayload(index).forEach((currentIndex) =>\n      set(\n        fieldsRef.current,\n        `${name}${isUndefined(currentIndex) ? '' : `.${currentIndex}`}`,\n        isUndefined(currentIndex) ? [] : undefined,\n      ),\n    );\n\n  const setFieldsAndNotify = (\n    fieldsValues: Partial<FieldArray<TFieldValues, TFieldArrayName>>[] = [],\n  ) => setFields(mapIds(fieldsValues, keyName));\n\n  const cleanup = <T>(ref: T) =>\n    !compact(get(ref, name, [])).length && unset(ref, name);\n\n  const updateDirtyFieldsWithDefaultValues = <\n    T extends Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[],\n  >(\n    updatedFieldArrayValues?: T,\n  ) =>\n    updatedFieldArrayValues &&\n    set(\n      formStateRef.current.dirtyFields,\n      name,\n      setFieldArrayDirtyFields(\n        omitKey(updatedFieldArrayValues),\n        get(defaultValuesRef.current, name, []),\n        get(formStateRef.current.dirtyFields, name, []),\n      ),\n    );\n\n  const batchStateUpdate = <T extends Function>(\n    method: T,\n    args: {\n      argA?: unknown;\n      argB?: unknown;\n    },\n    updatedFieldArrayValues: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = [],\n    shouldSet = true,\n  ) => {\n    inFieldArrayActionRef.current = true;\n    if (get(fieldsRef.current, name)) {\n      const output = method(get(fieldsRef.current, name), args.argA, args.argB);\n      shouldSet && set(fieldsRef.current, name, output);\n    }\n\n    if (Array.isArray(get(formStateRef.current.errors, name))) {\n      const output = method(\n        get(formStateRef.current.errors, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.errors, name, output);\n      cleanup(formStateRef.current.errors);\n    }\n\n    if (\n      readFormStateRef.current.touchedFields &&\n      get(formStateRef.current.touchedFields, name)\n    ) {\n      const output = method(\n        get(formStateRef.current.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.touchedFields, name, output);\n      cleanup(formStateRef.current.touchedFields);\n    }\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      set(\n        formStateRef.current.dirtyFields,\n        name,\n        setFieldArrayDirtyFields(\n          omitKey(updatedFieldArrayValues),\n          get(defaultValuesRef.current, name, []),\n          get(formStateRef.current.dirtyFields, name, []),\n        ),\n      );\n      updateDirtyFieldsWithDefaultValues(updatedFieldArrayValues);\n      cleanup(formStateRef.current.dirtyFields);\n    }\n\n    if (readFormStateRef.current.isValid) {\n      set(\n        validFieldsRef.current,\n        name,\n        method(get(validFieldsRef.current, name, []), args.argA),\n      );\n      cleanup(validFieldsRef.current);\n\n      set(\n        fieldsWithValidationRef.current,\n        name,\n        method(get(fieldsWithValidationRef.current, name, []), args.argA),\n      );\n      cleanup(fieldsWithValidationRef.current);\n    }\n\n    formStateSubjectRef.current.next({\n      isDirty: getIsDirty(name, omitKey(updatedFieldArrayValues)),\n      errors: formStateRef.current.errors as FieldErrors<TFieldValues>,\n      isValid: formStateRef.current.isValid,\n    });\n  };\n\n  const registerFieldArray = <T extends Object[]>(\n    values: T,\n    index = 0,\n    parentName = '',\n  ) =>\n    values.forEach(\n      (appendValueItem, valueIndex) =>\n        !isPrimitive(appendValueItem) &&\n        Object.entries(appendValueItem).forEach(([key, value]) => {\n          const inputName = `${parentName || name}.${\n            parentName ? valueIndex : index + valueIndex\n          }.${key}`;\n\n          Array.isArray(value)\n            ? registerFieldArray(value, valueIndex, inputName)\n            : set(fieldsRef.current, inputName, {\n                _f: {\n                  ref: {\n                    name: inputName,\n                  },\n                  name: inputName,\n                  value: isPrimitive(value) ? value : { ...value },\n                },\n              });\n        }),\n    );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = appendAt(\n      getCurrentFieldsValues(),\n      appendValue,\n    );\n    const currentIndex = updatedFieldArrayValues.length - appendValue.length;\n    setFieldsAndNotify(\n      updatedFieldArrayValues as Partial<\n        FieldArray<TFieldValues, TFieldArrayName>\n      >[],\n    );\n    batchStateUpdate(\n      appendAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues as Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n      false,\n    );\n    registerFieldArray(appendValue, currentIndex);\n\n    focusNameRef.current = getFocusDetail(currentIndex, options);\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const prependValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = prependAt(\n      getCurrentFieldsValues(),\n      prependValue,\n    );\n    setFieldsAndNotify(\n      updatedFieldArrayValues as Partial<\n        FieldArray<TFieldValues, TFieldArrayName>\n      >[],\n    );\n    batchStateUpdate(\n      prependAt,\n      {\n        argA: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues as Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    );\n    registerFieldArray(prependValue);\n\n    focusNameRef.current = getFocusDetail(0, options);\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValues: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(getCurrentFieldsValues(), index);\n    resetFields(index);\n    setFieldsAndNotify(updatedFieldArrayValues);\n    batchStateUpdate(\n      removeArrayAt,\n      {\n        argA: index,\n      },\n      updatedFieldArrayValues,\n    );\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const insertValue = convertToArrayPayload(value);\n    const updatedFieldArrayValues = insertAt(\n      getCurrentFieldsValues(),\n      index,\n      insertValue,\n    );\n    setFieldsAndNotify(\n      updatedFieldArrayValues as Partial<\n        FieldArray<TFieldValues, TFieldArrayName>\n      >[],\n    );\n    batchStateUpdate(\n      insertAt,\n      {\n        argA: index,\n        argB: fillEmptyArray(value),\n      },\n      updatedFieldArrayValues as Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    );\n    registerFieldArray(insertValue, index);\n\n    focusNameRef.current = getFocusDetail(index, options);\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    batchStateUpdate(\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      fieldValues,\n      false,\n    );\n    setFieldsAndNotify(fieldValues);\n  };\n\n  const move = (from: number, to: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    setFieldsAndNotify(fieldValues);\n    batchStateUpdate(\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      fieldValues,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    inFieldArrayActionRef.current = false;\n\n    if (isWatchAllRef.current) {\n      formStateSubjectRef.current.next({});\n    } else {\n      for (const watchField of watchFieldsRef.current) {\n        if (name.startsWith(watchField)) {\n          formStateSubjectRef.current.next({});\n          break;\n        }\n      }\n    }\n\n    watchSubjectRef.current.next({\n      name,\n      formValues: getFieldsValues(fieldsRef),\n    });\n\n    focusNameRef.current &&\n      focusFieldBy(\n        fieldsRef.current,\n        (key: string) => isString(key) && key.startsWith(focusNameRef.current),\n      );\n\n    focusNameRef.current = '';\n\n    fieldArraySubjectRef.current.next({\n      name,\n      fields: omitKey([...fields]),\n    });\n  }, [fields, name]);\n\n  React.useEffect(() => {\n    const fieldArraySubscription = fieldArraySubjectRef.current.subscribe({\n      next({ name: inputFieldArrayName, fields, isReset }) {\n        if (isReset) {\n          unset(fieldsRef.current, inputFieldArrayName || name);\n\n          inputFieldArrayName\n            ? set(\n                fieldArrayDefaultValuesRef.current,\n                inputFieldArrayName,\n                fields,\n              )\n            : (fieldArrayDefaultValuesRef.current = fields);\n\n          setFieldsAndNotify(get(fieldArrayDefaultValuesRef.current, name));\n        }\n      },\n    });\n    !get(fieldsRef.current, name) && set(fieldsRef.current, name, []);\n    isMountedRef.current = true;\n\n    return () => {\n      fieldArraySubscription.unsubscribe();\n      (shouldUnmount || shouldUnregister) &&\n        unregister(name as FieldPath<TFieldValues>);\n    };\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name]),\n    remove: React.useCallback(remove, [name]),\n    insert: React.useCallback(insert, [name]),\n    fields: fields as FieldArrayWithId<\n      TFieldValues,\n      TFieldArrayName,\n      TKeyName\n    >[],\n  };\n};\n","import { Field, FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isKey from '../utils/isKey';\nimport set from '../utils/set';\n\nexport default function getFields(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  fieldsRefs: FieldRefs,\n) {\n  const currentFields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field = get(fieldsRefs, name) as Field | undefined;\n\n    if (field) {\n      !isKey(name)\n        ? set(currentFields, name, field._f)\n        : (currentFields[name] = field._f);\n    }\n  }\n\n  return currentFields;\n}\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(field?: Field) {\n  if (field && field._f) {\n    const ref = field._f.ref;\n\n    if (ref.disabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field._f.refs).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field._f.refs).value;\n    }\n\n    return getFieldValueAs(\n      isUndefined(ref.value) ? field._f.ref.value : ref.value,\n      field._f,\n    );\n  }\n}\n","import { RegisterOptions } from '../types';\n\nexport default <T extends RegisterOptions>(options?: T, mounted?: boolean) =>\n  mounted &&\n  options &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  {\n    _f: {\n      ref,\n      refs,\n      required,\n      maxLength,\n      minLength,\n      min,\n      max,\n      pattern,\n      validate,\n      name,\n      value: inputValue,\n      valueAsNumber,\n      mount,\n    },\n  }: Field,\n  validateAllFieldCriteria: boolean,\n): Promise<InternalFieldErrors> => {\n  if (!mount) {\n    return {};\n  }\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox ? (refs || [])[0] || {} : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (\n    (!isNullOrUndefined(min) || !isNullOrUndefined(max)) &&\n    inputValue !== ''\n  ) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(inputValue) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(inputValue) && pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const validateRef = isRadioOrCheckbox && refs ? refs[0] : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(inputValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export type Observer<T> = {\n  next: (value: T) => void;\n};\n\ntype TearDown = () => void;\n\nexport type SubjectType<T> = {\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n};\n\nexport class Subscription {\n  private tearDowns: TearDown[] = [];\n\n  add(tearDown: TearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\n\nclass Subscriber<T> implements Observer<T> {\n  closed = false;\n\n  constructor(private observer: Observer<T>, subscription: Subscription) {\n    subscription.add(() => (this.closed = true));\n  }\n\n  next(value: T) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\n\nexport default class Subject<T> {\n  observers: Observer<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value: T) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer: Observer<T>) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n}\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFields from './logic/getFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport getFieldValueAs from './logic/getFieldValueAs';\nimport getNodeParentName from './logic/getNodeParentName';\nimport getProxyFormState from './logic/getProxyFormState';\nimport hasValidation from './logic/hasValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport skipValidation from './logic/skipValidation';\nimport validateField from './logic/validateField';\nimport compact from './utils/compact';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport deepEqual from './utils/deepEqual';\nimport get from './utils/get';\nimport getValidationModes from './utils/getValidationModes';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isFileInput from './utils/isFileInput';\nimport isFunction from './utils/isFunction';\nimport isHTMLElement from './utils/isHTMLElement';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isObject from './utils/isObject';\nimport isPrimitive from './utils/isPrimitive';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport isRadioInput from './utils/isRadioInput';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport isWeb from './utils/isWeb';\nimport omit from './utils/omit';\nimport set from './utils/set';\nimport Subject from './utils/Subject';\nimport unset from './utils/unset';\nimport { EVENTS, VALIDATION_MODE } from './constants';\nimport {\n  ChangeHandler,\n  DeepPartial,\n  DefaultValues,\n  EventType,\n  Field,\n  FieldArrayDefaultValues,\n  FieldError,\n  FieldErrors,\n  FieldName,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  FormStateSubjectRef,\n  GetIsDirty,\n  InternalFieldName,\n  InternalNameSet,\n  KeepStateOptions,\n  Path,\n  PathValue,\n  ReadFormState,\n  Ref,\n  RegisterOptions,\n  SetFieldValue,\n  SetValueConfig,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from './types';\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUnregister,\n  criteriaMode,\n}: UseFormProps<TFieldValues, TContext> = {}): UseFormReturn<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs>({});\n  const fieldsNamesRef = React.useRef<Set<InternalFieldName>>(new Set());\n  const formStateSubjectRef = React.useRef<FormStateSubjectRef<TFieldValues>>(\n    new Subject(),\n  );\n  const unregisterFieldsNamesRef = React.useRef<Set<InternalFieldName>>(\n    new Set(),\n  );\n  const watchSubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      type?: EventType;\n      formValues: unknown;\n    }>(),\n  );\n  const controllerSubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      values: DefaultValues<TFieldValues>;\n    }>(),\n  );\n  const fieldArraySubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      fields: any;\n      isReset?: boolean;\n    }>(),\n  );\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const inFieldArrayActionRef = React.useRef(false);\n  const watchFieldsRef = React.useRef<InternalNameSet>(new Set());\n  const isMountedRef = React.useRef(false);\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef =\n    React.useRef<DefaultValues<TFieldValues>>(defaultValues);\n  const isWatchAllRef = React.useRef(false);\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet>(new Set());\n  const validationMode = getValidationModes(mode);\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !validationMode.isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touchedFields: !isProxyEnabled,\n    isValidating: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n    errors: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n\n  const getIsValid = () => {\n    formStateRef.current.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n\n    return formStateRef.current.isValid;\n  };\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName,\n      error?: FieldError,\n      shouldRender: boolean | null = false,\n      state: {\n        dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n      isWatched?: boolean,\n    ): boolean | void => {\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        (get(fieldsWithValidationRef.current, name) || resolverRef.current) &&\n          set(validFieldsRef.current, name, true);\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldRender ||\n          isWatched ||\n          (error ? !deepEqual(previousError, error, true) : previousError) ||\n          !isEmptyObject(state) ||\n          (readFormStateRef.current.isValid &&\n            formStateRef.current.isValid !==\n              (resolverRef.current ? !!isValid : getIsValid()))) &&\n        !isNullOrUndefined(shouldRender)\n      ) {\n        const updatedFormState = {\n          ...state,\n          isValid: resolverRef.current ? !!isValid : getIsValid(),\n          errors: formStateRef.current.errors,\n          name,\n        };\n\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...updatedFormState,\n        };\n\n        formStateSubjectRef.current.next(\n          isWatched ? { name } : updatedFormState,\n        );\n      }\n\n      formStateSubjectRef.current.next({\n        isValidating: false,\n      });\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: InternalFieldName,\n      rawValue: SetFieldValue<TFieldValues>,\n      options: SetValueConfig = {},\n      shouldRender?: boolean,\n      shouldRegister?: boolean,\n    ) => {\n      shouldRegister && register(name as Path<TFieldValues>);\n      const field = get(fieldsRef.current, name);\n\n      if (field) {\n        const _f = (field as Field)._f;\n\n        if (_f) {\n          const value =\n            isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(rawValue)\n              ? ''\n              : rawValue;\n          _f.value = getFieldValueAs(rawValue, _f);\n\n          if (isRadioInput(_f.ref)) {\n            (_f.refs || []).forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === value),\n            );\n          } else if (isFileInput(_f.ref) && !isString(value)) {\n            _f.ref.files = value as FileList;\n          } else if (isMultipleSelect(_f.ref)) {\n            [..._f.ref.options].forEach(\n              (selectRef) =>\n                (selectRef.selected = (value as string[]).includes(\n                  selectRef.value,\n                )),\n            );\n          } else if (isCheckBoxInput(_f.ref) && _f.refs) {\n            _f.refs.length > 1\n              ? _f.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(value)\n                      ? !!(value as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : value === checkboxRef.value),\n                )\n              : (_f.refs[0].checked = !!value);\n          } else {\n            _f.ref.value = value;\n          }\n\n          if (shouldRender) {\n            const values = getFieldsValues(fieldsRef);\n            set(values, name, rawValue);\n            controllerSubjectRef.current.next({\n              values: {\n                ...defaultValuesRef.current,\n                ...values,\n              } as DefaultValues<TFieldValues>,\n              name,\n            });\n          }\n\n          options.shouldDirty && updateAndGetDirtyState(name, value);\n          options.shouldValidate && trigger(name as Path<TFieldValues>);\n        } else {\n          field._f = {\n            ref: {\n              name,\n              value: rawValue,\n            },\n            value: rawValue,\n          };\n        }\n      }\n    },\n    [],\n  );\n\n  const getIsDirty: GetIsDirty = React.useCallback((name, data) => {\n    const formValues = getFieldsValues(fieldsRef);\n\n    name && data && set(formValues, name, data);\n\n    return !deepEqual(formValues, defaultValuesRef.current);\n  }, []);\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName,\n      inputValue: unknown,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n    > => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          inputValue,\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        formStateRef.current.isDirty = getIsDirty();\n\n        const state = {\n          isDirty: formStateRef.current.isDirty,\n          dirtyFields: formStateRef.current.dirtyFields,\n          name,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        isChanged && shouldRender && formStateSubjectRef.current.next(state);\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      const error = (\n        await validateField(\n          get(fieldsRef.current, name) as Field,\n          isValidateAllFieldCriteria,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names: InternalFieldName[],\n      currentNames: FieldName<TFieldValues>[] = [],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getFieldsValues(fieldsRef),\n        contextRef.current,\n        {\n          criteriaMode,\n          names: currentNames,\n          fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n        },\n      );\n\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(formStateRef.current.errors, name, error)\n          : unset(formStateRef.current.errors, name);\n      }\n\n      return errors;\n    },\n    [criteriaMode],\n  );\n\n  const validateForm = async (fieldsRef: FieldRefs) => {\n    for (const name in fieldsRef) {\n      const field = fieldsRef[name];\n\n      if (field) {\n        const _f = field._f;\n        const current = omit(field, '_f');\n\n        if (_f) {\n          const fieldError = await validateField(\n            field,\n            isValidateAllFieldCriteria,\n          );\n\n          if (fieldError[_f.name]) {\n            set(formStateRef.current.errors, _f.name, fieldError[_f.name]);\n            unset(validFieldsRef.current, _f.name);\n          } else if (get(fieldsWithValidationRef.current, _f.name)) {\n            set(validFieldsRef.current, _f.name, true);\n            unset(formStateRef.current.errors, _f.name);\n          }\n        }\n\n        current && (await validateForm(current));\n      }\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = React.useCallback(\n    async (name, options = {}) => {\n      const fieldNames = isUndefined(name)\n        ? Object.keys(fieldsRef.current)\n        : (convertToArrayPayload(name) as InternalFieldName[]);\n      let isValid;\n      let schemaResult: FieldErrors<TFieldValues> | {} = {};\n\n      formStateSubjectRef.current.next({\n        isValidating: true,\n      });\n\n      if (resolverRef.current) {\n        schemaResult = await executeSchemaOrResolverValidation(\n          fieldNames,\n          isUndefined(name)\n            ? undefined\n            : (fieldNames as FieldName<TFieldValues>[]),\n        );\n        isValid = fieldNames.every((name) => !get(schemaResult, name));\n      } else {\n        if (isUndefined(name)) {\n          await validateForm(fieldsRef.current);\n          isValid = isEmptyObject(formStateRef.current.errors);\n        } else {\n          isValid = (\n            await Promise.all(\n              fieldNames\n                .filter((fieldName) => get(fieldsRef.current, fieldName))\n                .map(\n                  async (fieldName) => await executeValidation(fieldName, null),\n                ),\n            )\n          ).every(Boolean);\n        }\n      }\n\n      formStateSubjectRef.current.next({\n        ...(isString(name) ? { name } : {}),\n        errors: formStateRef.current.errors,\n        isValidating: false,\n        isValid: resolverRef.current\n          ? isEmptyObject(schemaResult)\n          : getIsValid(),\n      });\n\n      if (!isValid && options.shouldFocus) {\n        focusFieldBy(\n          fieldsRef.current,\n          (key) => get(formStateRef.current.errors, key),\n          fieldNames,\n        );\n      }\n\n      return isValid;\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldPath<TFieldValues>,\n      value: UnpackNestedValue<\n        PathValue<TFieldValues, FieldPath<TFieldValues>>\n      >,\n      options: SetValueConfig,\n    ) =>\n      Object.entries(value).forEach(([inputKey, inputValue]) => {\n        const fieldName = `${name}.${inputKey}` as Path<TFieldValues>;\n        const field = get(fieldsRef.current, fieldName);\n        const isFieldArray = fieldArrayNamesRef.current.has(name);\n\n        isFieldArray || !isPrimitive(inputValue) || (field && !field._f)\n          ? setInternalValues(\n              fieldName,\n              inputValue as SetFieldValue<TFieldValues>,\n              options,\n            )\n          : setFieldValue(\n              fieldName,\n              inputValue as SetFieldValue<TFieldValues>,\n              options,\n              true,\n              !field,\n            );\n      }),\n    [trigger],\n  );\n\n  const isFieldWatched = (name: FieldPath<TFieldValues>) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    options?: RegisterOptions,\n    ref?: Ref,\n    isWithinRefCallback?: boolean,\n  ) => {\n    const field = get(fieldsRef.current, name) as Field;\n    const defaultValue = isUndefined(field._f.value)\n      ? get(defaultValuesRef.current, name)\n      : field._f.value;\n\n    if (field && !isUndefined(defaultValue)) {\n      if (ref && (ref as HTMLInputElement).defaultChecked) {\n        field._f.value = getFieldValue(field);\n      } else if (!isNameInFieldArray(fieldArrayNamesRef.current, name)) {\n        setFieldValue(name, defaultValue);\n      } else {\n        field._f.value = defaultValue;\n      }\n    } else {\n      field._f.value = getFieldValue(field);\n    }\n\n    if (\n      (!isUndefined(defaultValue) || isWithinRefCallback) &&\n      hasValidation(options, field._f.mount) &&\n      !validationMode.isOnSubmit &&\n      field &&\n      readFormStateRef.current.isValid\n    ) {\n      validateField(field, isValidateAllFieldCriteria).then((error) => {\n        isEmptyObject(error)\n          ? set(validFieldsRef.current, name, true)\n          : unset(validFieldsRef.current, name);\n\n        formStateRef.current.isValid !== getIsValid() &&\n          updateFormState({ ...formStateRef.current, isValid: getIsValid() });\n      });\n    }\n\n    return defaultValue;\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(fieldsRef.current, name);\n    const isFieldArray = fieldArrayNamesRef.current.has(name);\n\n    if (isFieldArray) {\n      fieldArraySubjectRef.current.next({\n        fields: value,\n        name,\n        isReset: true,\n      });\n\n      if (\n        (readFormStateRef.current.isDirty ||\n          readFormStateRef.current.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        set(\n          formStateRef.current.dirtyFields,\n          name,\n          setFieldArrayDirtyFields(\n            value,\n            get(defaultValuesRef.current, name, []),\n            get(formStateRef.current.dirtyFields, name, []),\n          ),\n        );\n\n        formStateSubjectRef.current.next({\n          name,\n          dirtyFields: formStateRef.current.dirtyFields,\n          isDirty: getIsDirty(name, value),\n        });\n      }\n\n      !(value as []).length &&\n        set(fieldsRef.current, name, []) &&\n        set(fieldArrayDefaultValuesRef.current, name, []);\n    }\n\n    ((field && !field._f) || isFieldArray) && !isNullOrUndefined(value)\n      ? setInternalValues(name, value, isFieldArray ? {} : options)\n      : setFieldValue(name, value, options, true, !field);\n\n    isFieldWatched(name) && formStateSubjectRef.current.next({});\n    watchSubjectRef.current.next({ name, formValues: getValues() });\n  };\n\n  const handleChange: ChangeHandler = React.useCallback(\n    async ({ type, target, target: { value, type: inputType } }) => {\n      let name = (target as Ref)!.name;\n      let error;\n      let isValid;\n      const field = get(fieldsRef.current, name) as Field;\n\n      if (field) {\n        let inputValue = inputType ? getFieldValue(field) : undefined;\n        inputValue = isUndefined(inputValue) ? value : inputValue;\n\n        const isBlurEvent = type === EVENTS.BLUR;\n        const {\n          isOnBlur: isReValidateOnBlur,\n          isOnChange: isReValidateOnChange,\n        } = getValidationModes(reValidateMode);\n\n        const shouldSkipValidation =\n          (!hasValidation(field._f, field._f.mount) &&\n            !resolverRef.current &&\n            !get(formStateRef.current.errors, name)) ||\n          skipValidation({\n            isBlurEvent,\n            isTouched: !!get(formStateRef.current.touchedFields, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            isReValidateOnBlur,\n            isReValidateOnChange,\n            ...validationMode,\n          });\n        const isWatched =\n          !isBlurEvent && isFieldWatched(name as FieldPath<TFieldValues>);\n\n        if (!isUndefined(inputValue)) {\n          field._f.value = inputValue;\n        }\n\n        const state = updateAndGetDirtyState(name, field._f.value, false);\n\n        if (isBlurEvent && !get(formStateRef.current.touchedFields, name)) {\n          set(formStateRef.current.touchedFields, name, true);\n          readFormStateRef.current.touchedFields &&\n            (state.touchedFields = formStateRef.current.touchedFields);\n        }\n\n        let shouldRender = !isEmptyObject(state) || isWatched;\n\n        if (shouldSkipValidation) {\n          !isBlurEvent &&\n            watchSubjectRef.current.next({\n              name,\n              type,\n              formValues: getValues(),\n            });\n          return (\n            shouldRender &&\n            formStateSubjectRef.current.next(\n              isWatched ? { name } : { ...state, name },\n            )\n          );\n        }\n\n        formStateSubjectRef.current.next({\n          isValidating: true,\n        });\n\n        if (resolverRef.current) {\n          const { errors } = await resolverRef.current(\n            getFieldsValues(fieldsRef),\n            contextRef.current,\n            {\n              criteriaMode,\n              fields: getFields([name], fieldsRef.current),\n              names: [name as FieldName<TFieldValues>],\n            },\n          );\n          const previousFormIsValid = formStateRef.current.isValid;\n          error = get(errors, name);\n\n          if (isCheckBoxInput(target as Ref) && !error) {\n            const parentNodeName = getNodeParentName(name);\n            const currentError = get(errors, parentNodeName, {});\n            currentError.type && currentError.message && (error = currentError);\n\n            if (\n              currentError ||\n              get(formStateRef.current.errors, parentNodeName)\n            ) {\n              name = parentNodeName;\n            }\n          }\n\n          isValid = isEmptyObject(errors);\n\n          previousFormIsValid !== isValid && (shouldRender = true);\n        } else {\n          error = (await validateField(field, isValidateAllFieldCriteria))[\n            name\n          ];\n        }\n\n        !isBlurEvent &&\n          watchSubjectRef.current.next({\n            name,\n            type,\n            formValues: getValues(),\n          });\n        shouldRenderBaseOnError(\n          name,\n          error,\n          shouldRender,\n          state,\n          isValid,\n          isWatched,\n        );\n      }\n    },\n    [],\n  );\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ...defaultValuesRef.current,\n      ...getFieldsValues(fieldsRef),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const updateIsValid = React.useCallback(\n    async (values = {}) => {\n      const previousIsValid = formStateRef.current.isValid;\n\n      if (resolver) {\n        const { errors } = await resolverRef.current!(\n          {\n            ...getFieldsValues(fieldsRef),\n            ...values,\n          },\n          contextRef.current,\n          {\n            criteriaMode,\n            fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n          },\n        );\n        formStateRef.current.isValid = isEmptyObject(errors);\n      } else {\n        getIsValid();\n      }\n\n      previousIsValid !== formStateRef.current.isValid &&\n        formStateSubjectRef.current.next({\n          isValid: formStateRef.current.isValid,\n        });\n    },\n    [criteriaMode],\n  );\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(formStateRef.current.errors, inputName),\n        )\n      : (formStateRef.current.errors = {});\n\n    formStateSubjectRef.current.next({\n      errors: formStateRef.current.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = (\n      ((get(fieldsRef.current, name) as Field) || { _f: {} })._f || {}\n    ).ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    formStateSubjectRef.current.next({\n      name,\n      errors: formStateRef.current.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watchInternal: WatchInternal<TFieldValues> = React.useCallback(\n    (fieldNames, defaultValue, isGlobal, formValues) => {\n      const isArrayNames = Array.isArray(fieldNames);\n      const fieldValues =\n        formValues || isMountedRef.current\n          ? {\n              ...defaultValuesRef.current,\n              ...(formValues || getFieldsValues(fieldsRef)),\n            }\n          : isUndefined(defaultValue)\n          ? defaultValuesRef.current\n          : isArrayNames\n          ? defaultValue\n          : { [fieldNames as InternalFieldName]: defaultValue };\n\n      if (isUndefined(fieldNames)) {\n        isGlobal && (isWatchAllRef.current = true);\n        return fieldValues;\n      }\n\n      const result = [];\n\n      for (const fieldName of convertToArrayPayload(fieldNames)) {\n        isGlobal && watchFieldsRef.current.add(fieldName as InternalFieldName);\n        result.push(get(fieldValues, fieldName as InternalFieldName));\n      }\n\n      return isArrayNames ? result : result[0];\n    },\n    [],\n  );\n\n  const watch: UseFormWatch<TFieldValues> = (\n    fieldName?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(fieldName)\n      ? watchSubjectRef.current.subscribe({\n          next: (info) =>\n            fieldName(\n              watchInternal(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ) as UnpackNestedValue<TFieldValues>,\n              info,\n            ),\n        })\n      : watchInternal(\n          fieldName as string | string[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const inputName of name\n      ? convertToArrayPayload(name)\n      : Object.keys(fieldsNamesRef.current)) {\n      fieldsNamesRef.current.delete(inputName);\n      fieldArrayNamesRef.current.delete(inputName);\n\n      if (get(fieldsRef.current, inputName) as Field) {\n        if (!options.keepIsValid) {\n          unset(fieldsWithValidationRef.current, inputName);\n          unset(validFieldsRef.current, inputName);\n        }\n        !options.keepError && unset(formStateRef.current.errors, inputName);\n        !options.keepValue && unset(fieldsRef.current, inputName);\n        !options.keepDirty &&\n          unset(formStateRef.current.dirtyFields, inputName);\n        !options.keepTouched &&\n          unset(formStateRef.current.touchedFields, inputName);\n        !shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(defaultValuesRef.current, inputName);\n\n        watchSubjectRef.current.next({\n          name: inputName,\n          formValues: getValues(),\n        });\n      }\n    }\n\n    formStateSubjectRef.current.next({\n      ...formStateRef.current,\n      ...(!options.keepDirty ? {} : { isDirty: getIsDirty() }),\n      ...(resolverRef.current ? {} : { isValid: getIsValid() }),\n    });\n    !options.keepIsValid && updateIsValid();\n  };\n\n  const registerFieldRef = (\n    name: InternalFieldName,\n    ref: HTMLInputElement,\n    options?: RegisterOptions,\n  ): ((name: InternalFieldName) => void) | void => {\n    register(name as FieldPath<TFieldValues>, options);\n    let field = get(fieldsRef.current, name) as Field;\n\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n\n    if (\n      ref === field._f.ref ||\n      (isWeb && isHTMLElement(field._f.ref) && !isHTMLElement(ref)) ||\n      (isRadioOrCheckbox &&\n        Array.isArray(field._f.refs) &&\n        compact(field._f.refs).find((option) => option === ref))\n    ) {\n      return;\n    }\n\n    field = {\n      _f: isRadioOrCheckbox\n        ? {\n            ...field._f,\n            refs: [\n              ...compact(field._f.refs || []).filter(\n                (ref) => isHTMLElement(ref) && document.contains(ref),\n              ),\n              ref,\n            ],\n            ref: { type: ref.type, name },\n          }\n        : {\n            ...field._f,\n            ref,\n          },\n    };\n\n    set(fieldsRef.current, name, field);\n\n    const defaultValue = updateValidAndValue(name, options, ref, true);\n\n    if (\n      isRadioOrCheckbox && Array.isArray(defaultValue)\n        ? !deepEqual(get(fieldsRef.current, name)._f.value, defaultValue)\n        : isUndefined(get(fieldsRef.current, name)._f.value)\n    ) {\n      get(fieldsRef.current, name)._f.value = getFieldValue(\n        get(fieldsRef.current, name),\n      );\n    }\n  };\n\n  const register: UseFormRegister<TFieldValues> = React.useCallback(\n    (name, options = {}) => {\n      const field = get(fieldsRef.current, name);\n\n      set(fieldsRef.current, name, {\n        _f: {\n          ...(field && field._f ? field._f : { ref: { name } }),\n          name,\n          mount: true,\n          ...options,\n        },\n      });\n      hasValidation(options, true) &&\n        set(fieldsWithValidationRef.current, name, true);\n      fieldsNamesRef.current.add(name);\n      !field && updateValidAndValue(name, options);\n\n      return isWindowUndefined\n        ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n        : {\n            name,\n            onChange: handleChange,\n            onBlur: handleChange,\n            ref: (ref: HTMLInputElement | null): void => {\n              if (ref) {\n                registerFieldRef(name, ref, options);\n              } else {\n                const field = get(fieldsRef.current, name, {}) as Field;\n                const shouldUnmount =\n                  shouldUnregister || options.shouldUnregister;\n\n                if (field._f) {\n                  field._f.mount = false;\n                  // If initial state of field element is disabled,\n                  // value is not set on first \"register\"\n                  // re-sync the value in when it switched to enabled\n                  if (isUndefined(field._f.value)) {\n                    field._f.value = field._f.ref.value;\n                  }\n                }\n\n                if (\n                  isNameInFieldArray(fieldArrayNamesRef.current, name)\n                    ? shouldUnmount && !inFieldArrayActionRef.current\n                    : shouldUnmount\n                ) {\n                  unregisterFieldsNamesRef.current.add(name);\n                }\n              }\n            },\n          };\n    },\n    [],\n  );\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> = React.useCallback(\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues = getFieldsValues(fieldsRef);\n\n      formStateSubjectRef.current.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            {\n              criteriaMode,\n              fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n            },\n          );\n          formStateRef.current.errors = errors;\n          fieldValues = values;\n        } else {\n          await validateForm(fieldsRef.current);\n        }\n\n        if (\n          isEmptyObject(formStateRef.current.errors) &&\n          Object.keys(formStateRef.current.errors).every((name) =>\n            get(fieldValues, name),\n          )\n        ) {\n          formStateSubjectRef.current.next({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusFieldBy(\n              fieldsRef.current,\n              (key) => get(formStateRef.current.errors, key),\n              fieldsNamesRef.current,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        formStateRef.current.isSubmitted = true;\n        formStateSubjectRef.current.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(formStateRef.current.errors) && hasNoPromiseError,\n          submitCount: formStateRef.current.submitCount + 1,\n          errors: formStateRef.current.errors,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria, criteriaMode],\n  );\n\n  const resetFromState = React.useCallback(\n    (\n      {\n        keepErrors,\n        keepDirty,\n        keepIsSubmitted,\n        keepTouched,\n        keepDefaultValues,\n        keepIsValid,\n        keepSubmitCount,\n      }: KeepStateOptions,\n      values?: DefaultValues<TFieldValues>,\n    ) => {\n      if (!keepIsValid) {\n        validFieldsRef.current = {};\n        fieldsWithValidationRef.current = {};\n      }\n\n      watchFieldsRef.current = new Set();\n      isWatchAllRef.current = false;\n\n      formStateSubjectRef.current.next({\n        submitCount: keepSubmitCount ? formStateRef.current.submitCount : 0,\n        isDirty: keepDirty\n          ? formStateRef.current.isDirty\n          : keepDefaultValues\n          ? deepEqual(values, defaultValuesRef.current)\n          : false,\n        isSubmitted: keepIsSubmitted ? formStateRef.current.isSubmitted : false,\n        isValid: keepIsValid\n          ? formStateRef.current.isValid\n          : !!updateIsValid(values),\n        dirtyFields: keepDirty ? formStateRef.current.dirtyFields : {},\n        touchedFields: keepTouched ? formStateRef.current.touchedFields : {},\n        errors: keepErrors ? formStateRef.current.errors : {},\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n      });\n    },\n    [],\n  );\n\n  const registerAbsentFields = <T extends DefaultValues<TFieldValues>>(\n    value: T,\n    name = '',\n  ): void => {\n    const field = get(fieldsRef.current, name);\n\n    if (!field || (field && !field._f)) {\n      if (\n        !field &&\n        (isPrimitive(value) ||\n          (isWeb && (value instanceof FileList || value instanceof Date)))\n      ) {\n        set(fieldsRef.current, name, {\n          _f: {\n            ref: { name, value },\n            value,\n            name,\n          },\n        });\n      }\n\n      if (Array.isArray(value) || isObject(value)) {\n        if (name && !get(fieldsRef.current, name)) {\n          set(fieldsRef.current, name, Array.isArray(value) ? [] : {});\n        }\n\n        for (const key in value) {\n          registerAbsentFields(value[key], name + (name ? '.' : '') + key);\n        }\n      }\n    }\n  };\n\n  const reset: UseFormReset<TFieldValues> = (values, keepStateOptions = {}) => {\n    const updatedValues = values || defaultValuesRef.current;\n\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const name of fieldsNamesRef.current) {\n        const field = get(fieldsRef.current, name);\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs)\n            ? field._f.refs[0]\n            : field._f.ref;\n\n          try {\n            isHTMLElement(inputRef) && inputRef.closest('form')!.reset();\n            break;\n          } catch {}\n        }\n      }\n    }\n\n    !keepStateOptions.keepDefaultValues &&\n      (defaultValuesRef.current = { ...updatedValues });\n\n    if (!keepStateOptions.keepValues) {\n      fieldsRef.current = {};\n\n      controllerSubjectRef.current.next({\n        values: { ...updatedValues },\n      });\n\n      watchSubjectRef.current.next({\n        formValues: { ...updatedValues },\n      });\n\n      fieldArraySubjectRef.current.next({\n        fields: { ...updatedValues },\n        isReset: true,\n      });\n    }\n\n    !keepStateOptions.keepDefaultValues &&\n      !shouldUnregister &&\n      registerAbsentFields({ ...updatedValues });\n\n    resetFromState(keepStateOptions, values);\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) =>\n    get(fieldsRef.current, name)._f.ref.focus();\n\n  React.useEffect(() => {\n    !shouldUnregister && registerAbsentFields(defaultValuesRef.current);\n\n    const formStateSubscription = formStateSubjectRef.current.subscribe({\n      next(formState) {\n        if (shouldRenderFormState(formState, readFormStateRef.current, true)) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...formState,\n          };\n          updateFormState(formStateRef.current);\n        }\n      },\n    });\n\n    const useFieldArraySubscription = fieldArraySubjectRef.current.subscribe({\n      next(state) {\n        if (state.fields && state.name && readFormStateRef.current.isValid) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, state.name, state.fields);\n          updateIsValid(values);\n        }\n      },\n    });\n\n    resolverRef.current && readFormStateRef.current.isValid && updateIsValid();\n\n    return () => {\n      watchSubjectRef.current.unsubscribe();\n      formStateSubscription.unsubscribe();\n      useFieldArraySubscription.unsubscribe();\n    };\n  }, []);\n\n  React.useEffect(() => {\n    const isLiveInDom = (ref: Ref) =>\n      !isHTMLElement(ref) || !document.contains(ref);\n\n    isMountedRef.current = true;\n\n    for (const name of unregisterFieldsNamesRef.current) {\n      const field = get(fieldsRef.current, name) as Field;\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every(isLiveInDom)\n          : isLiveInDom(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    unregisterFieldsNamesRef.current = new Set();\n  });\n\n  return {\n    control: React.useMemo(\n      () => ({\n        register,\n        isWatchAllRef,\n        inFieldArrayActionRef,\n        watchFieldsRef,\n        getIsDirty,\n        formStateSubjectRef,\n        fieldArraySubjectRef,\n        controllerSubjectRef,\n        watchSubjectRef,\n        watchInternal,\n        fieldsRef,\n        validFieldsRef,\n        fieldsWithValidationRef,\n        fieldArrayNamesRef,\n        readFormStateRef,\n        formStateRef,\n        defaultValuesRef,\n        fieldArrayDefaultValuesRef,\n        unregister,\n        shouldUnmount: shouldUnregister,\n      }),\n      [],\n    ),\n    formState: getProxyFormState<TFieldValues>(\n      isProxyEnabled,\n      formState,\n      readFormStateRef,\n    ),\n    trigger,\n    register,\n    handleSubmit,\n    watch: React.useCallback(watch, []),\n    setValue: React.useCallback(setValue, [setInternalValues]),\n    getValues: React.useCallback(getValues, []),\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    unregister: React.useCallback(unregister, []),\n    setError: React.useCallback(setError, []),\n    setFocus: React.useCallback(setFocus, []),\n  };\n}\n","import * as React from 'react';\n\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport isUndefined from './utils/isUndefined';\nimport {\n  Control,\n  DeepPartial,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\n\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\n  control?: Control<TFieldValues>;\n}): UnpackNestedValue<DeepPartial<TFieldValues>>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TName;\n  defaultValue?: FieldPathValue<TFieldValues, TName>;\n  control?: Control<TFieldValues>;\n}): FieldPathValue<TFieldValues, TName>;\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues>[] = FieldPath<TFieldValues>[],\n>(props: {\n  name: TName;\n  defaultValue?: UnpackNestedValue<DeepPartial<TFieldValues>>;\n  control?: Control<TFieldValues>;\n}): FieldPathValues<TFieldValues, TName>;\nexport function useWatch<TFieldValues>(props?: UseWatchProps<TFieldValues>) {\n  const { control, name, defaultValue } = props || {};\n  const methods = useFormContext();\n  const nameRef = React.useRef(name);\n  nameRef.current = name;\n\n  const { watchInternal, watchSubjectRef } = control || methods.control;\n  const [value, updateValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? watchInternal(name as InternalFieldName)\n      : defaultValue,\n  );\n\n  React.useEffect(() => {\n    watchInternal(name as InternalFieldName);\n\n    const watchSubscription = watchSubjectRef.current.subscribe({\n      next: ({ name: inputName, formValues }) =>\n        (!nameRef.current ||\n          !inputName ||\n          convertToArrayPayload(nameRef.current).some(\n            (fieldName) =>\n              inputName &&\n              fieldName &&\n              (fieldName.startsWith(inputName as InternalFieldName) ||\n                inputName.startsWith(fieldName as InternalFieldName)),\n          )) &&\n        updateValue(\n          watchInternal(\n            nameRef.current as string,\n            defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n            false,\n            formValues,\n          ),\n        ),\n    });\n\n    return () => watchSubscription.unsubscribe();\n  }, []);\n\n  return value;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}