{"ast":null,"code":"class VRButton {\n  static createButton(renderer, options) {\n    if (options) {\n      console.error('THREE.VRButton: The \"options\" parameter has been removed. Please set the reference space type via renderer.xr.setReferenceSpaceType() instead.');\n    }\n    const button = document.createElement('button');\n    function showEnterVR(/*device*/\n    ) {\n      let currentSession = null;\n      async function onSessionStarted(session) {\n        session.addEventListener('end', onSessionEnded);\n        await renderer.xr.setSession(session);\n        button.textContent = 'EXIT VR';\n        currentSession = session;\n      }\n      function onSessionEnded(/*event*/\n      ) {\n        currentSession.removeEventListener('end', onSessionEnded);\n        button.textContent = 'ENTER VR';\n        currentSession = null;\n      }\n\n      //\n\n      button.style.display = '';\n      button.style.cursor = 'pointer';\n      button.style.left = 'calc(50% - 50px)';\n      button.style.width = '100px';\n      button.textContent = 'ENTER VR';\n      button.onmouseenter = function () {\n        button.style.opacity = '1.0';\n      };\n      button.onmouseleave = function () {\n        button.style.opacity = '0.5';\n      };\n      button.onclick = function () {\n        if (currentSession === null) {\n          // WebXR's requestReferenceSpace only works if the corresponding feature\n          // was requested at session creation time. For simplicity, just ask for\n          // the interesting ones as optional features, but be aware that the\n          // requestReferenceSpace call will fail if it turns out to be unavailable.\n          // ('local' is always available for immersive sessions and doesn't need to\n          // be requested separately.)\n\n          const sessionInit = {\n            optionalFeatures: ['local-floor', 'bounded-floor', 'hand-tracking', 'layers']\n          };\n          navigator.xr.requestSession('immersive-vr', sessionInit).then(onSessionStarted);\n        } else {\n          currentSession.end();\n        }\n      };\n    }\n    function disableButton() {\n      button.style.display = '';\n      button.style.cursor = 'auto';\n      button.style.left = 'calc(50% - 75px)';\n      button.style.width = '150px';\n      button.onmouseenter = null;\n      button.onmouseleave = null;\n      button.onclick = null;\n    }\n    function showWebXRNotFound() {\n      disableButton();\n      button.textContent = 'VR NOT SUPPORTED';\n    }\n    function stylizeElement(element) {\n      element.style.position = 'absolute';\n      element.style.bottom = '20px';\n      element.style.padding = '12px 6px';\n      element.style.border = '1px solid #fff';\n      element.style.borderRadius = '4px';\n      element.style.background = 'rgba(0,0,0,0.1)';\n      element.style.color = '#fff';\n      element.style.font = 'normal 13px sans-serif';\n      element.style.textAlign = 'center';\n      element.style.opacity = '0.5';\n      element.style.outline = 'none';\n      element.style.zIndex = '999';\n    }\n    if ('xr' in navigator) {\n      button.id = 'VRButton';\n      button.style.display = 'none';\n      stylizeElement(button);\n      navigator.xr.isSessionSupported('immersive-vr').then(function (supported) {\n        supported ? showEnterVR() : showWebXRNotFound();\n        if (supported && VRButton.xrSessionIsGranted) {\n          button.click();\n        }\n      });\n      return button;\n    } else {\n      const message = document.createElement('a');\n      if (window.isSecureContext === false) {\n        message.href = document.location.href.replace(/^http:/, 'https:');\n        message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n      } else {\n        message.href = 'https://immersiveweb.dev/';\n        message.innerHTML = 'WEBXR NOT AVAILABLE';\n      }\n      message.style.left = 'calc(50% - 90px)';\n      message.style.width = '180px';\n      message.style.textDecoration = 'none';\n      stylizeElement(message);\n      return message;\n    }\n  }\n  static xrSessionIsGranted = false;\n  static registerSessionGrantedListener() {\n    if ('xr' in navigator) {\n      navigator.xr.addEventListener('sessiongranted', () => {\n        VRButton.xrSessionIsGranted = true;\n      });\n    }\n  }\n}\nVRButton.registerSessionGrantedListener();\nexport { VRButton };","map":{"version":3,"names":["VRButton","createButton","renderer","options","console","error","button","document","createElement","showEnterVR","currentSession","onSessionStarted","session","addEventListener","onSessionEnded","xr","setSession","textContent","removeEventListener","style","display","cursor","left","width","onmouseenter","opacity","onmouseleave","onclick","sessionInit","optionalFeatures","navigator","requestSession","then","end","disableButton","showWebXRNotFound","stylizeElement","element","position","bottom","padding","border","borderRadius","background","color","font","textAlign","outline","zIndex","id","isSessionSupported","supported","xrSessionIsGranted","click","message","window","isSecureContext","href","location","replace","innerHTML","textDecoration","registerSessionGrantedListener"],"sources":["C:/Users/admin/Download/project-long/cellphones/client-cellphones/node_modules/three/examples/jsm/webxr/VRButton.js"],"sourcesContent":["class VRButton {\n\n\tstatic createButton( renderer, options ) {\n\n\t\tif ( options ) {\n\n\t\t\tconsole.error( 'THREE.VRButton: The \"options\" parameter has been removed. Please set the reference space type via renderer.xr.setReferenceSpaceType() instead.' );\n\n\t\t}\n\n\t\tconst button = document.createElement( 'button' );\n\n\t\tfunction showEnterVR( /*device*/ ) {\n\n\t\t\tlet currentSession = null;\n\n\t\t\tasync function onSessionStarted( session ) {\n\n\t\t\t\tsession.addEventListener( 'end', onSessionEnded );\n\n\t\t\t\tawait renderer.xr.setSession( session );\n\t\t\t\tbutton.textContent = 'EXIT VR';\n\n\t\t\t\tcurrentSession = session;\n\n\t\t\t}\n\n\t\t\tfunction onSessionEnded( /*event*/ ) {\n\n\t\t\t\tcurrentSession.removeEventListener( 'end', onSessionEnded );\n\n\t\t\t\tbutton.textContent = 'ENTER VR';\n\n\t\t\t\tcurrentSession = null;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tbutton.style.display = '';\n\n\t\t\tbutton.style.cursor = 'pointer';\n\t\t\tbutton.style.left = 'calc(50% - 50px)';\n\t\t\tbutton.style.width = '100px';\n\n\t\t\tbutton.textContent = 'ENTER VR';\n\n\t\t\tbutton.onmouseenter = function () {\n\n\t\t\t\tbutton.style.opacity = '1.0';\n\n\t\t\t};\n\n\t\t\tbutton.onmouseleave = function () {\n\n\t\t\t\tbutton.style.opacity = '0.5';\n\n\t\t\t};\n\n\t\t\tbutton.onclick = function () {\n\n\t\t\t\tif ( currentSession === null ) {\n\n\t\t\t\t\t// WebXR's requestReferenceSpace only works if the corresponding feature\n\t\t\t\t\t// was requested at session creation time. For simplicity, just ask for\n\t\t\t\t\t// the interesting ones as optional features, but be aware that the\n\t\t\t\t\t// requestReferenceSpace call will fail if it turns out to be unavailable.\n\t\t\t\t\t// ('local' is always available for immersive sessions and doesn't need to\n\t\t\t\t\t// be requested separately.)\n\n\t\t\t\t\tconst sessionInit = { optionalFeatures: [ 'local-floor', 'bounded-floor', 'hand-tracking', 'layers' ] };\n\t\t\t\t\tnavigator.xr.requestSession( 'immersive-vr', sessionInit ).then( onSessionStarted );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcurrentSession.end();\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction disableButton() {\n\n\t\t\tbutton.style.display = '';\n\n\t\t\tbutton.style.cursor = 'auto';\n\t\t\tbutton.style.left = 'calc(50% - 75px)';\n\t\t\tbutton.style.width = '150px';\n\n\t\t\tbutton.onmouseenter = null;\n\t\t\tbutton.onmouseleave = null;\n\n\t\t\tbutton.onclick = null;\n\n\t\t}\n\n\t\tfunction showWebXRNotFound() {\n\n\t\t\tdisableButton();\n\n\t\t\tbutton.textContent = 'VR NOT SUPPORTED';\n\n\t\t}\n\n\t\tfunction stylizeElement( element ) {\n\n\t\t\telement.style.position = 'absolute';\n\t\t\telement.style.bottom = '20px';\n\t\t\telement.style.padding = '12px 6px';\n\t\t\telement.style.border = '1px solid #fff';\n\t\t\telement.style.borderRadius = '4px';\n\t\t\telement.style.background = 'rgba(0,0,0,0.1)';\n\t\t\telement.style.color = '#fff';\n\t\t\telement.style.font = 'normal 13px sans-serif';\n\t\t\telement.style.textAlign = 'center';\n\t\t\telement.style.opacity = '0.5';\n\t\t\telement.style.outline = 'none';\n\t\t\telement.style.zIndex = '999';\n\n\t\t}\n\n\t\tif ( 'xr' in navigator ) {\n\n\t\t\tbutton.id = 'VRButton';\n\t\t\tbutton.style.display = 'none';\n\n\t\t\tstylizeElement( button );\n\n\t\t\tnavigator.xr.isSessionSupported( 'immersive-vr' ).then( function ( supported ) {\n\n\t\t\t\tsupported ? showEnterVR() : showWebXRNotFound();\n\n\t\t\t\tif ( supported && VRButton.xrSessionIsGranted ) {\n\n\t\t\t\t\tbutton.click();\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn button;\n\n\t\t} else {\n\n\t\t\tconst message = document.createElement( 'a' );\n\n\t\t\tif ( window.isSecureContext === false ) {\n\n\t\t\t\tmessage.href = document.location.href.replace( /^http:/, 'https:' );\n\t\t\t\tmessage.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n\n\t\t\t} else {\n\n\t\t\t\tmessage.href = 'https://immersiveweb.dev/';\n\t\t\t\tmessage.innerHTML = 'WEBXR NOT AVAILABLE';\n\n\t\t\t}\n\n\t\t\tmessage.style.left = 'calc(50% - 90px)';\n\t\t\tmessage.style.width = '180px';\n\t\t\tmessage.style.textDecoration = 'none';\n\n\t\t\tstylizeElement( message );\n\n\t\t\treturn message;\n\n\t\t}\n\n\t}\n\n\tstatic xrSessionIsGranted = false;\n\n\tstatic registerSessionGrantedListener() {\n\n\t\tif ( 'xr' in navigator ) {\n\n\t\t\tnavigator.xr.addEventListener( 'sessiongranted', () => {\n\n\t\t\t\tVRButton.xrSessionIsGranted = true;\n\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n}\n\nVRButton.registerSessionGrantedListener();\n\nexport { VRButton };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}