{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import'./AIChatbot.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function AIChatbot(_ref){let{products=[]}=_ref;const[isOpen,setIsOpen]=useState(false);const[messages,setMessages]=useState([{id:1,text:\"Xin chào! Tôi là AI Assistant của Cellphones. Tôi có thể giúp bạn tìm hiểu về các sản phẩm điện thoại, so sánh tính năng, và đưa ra gợi ý phù hợp. Bạn muốn hỏi gì?\",sender:'bot',timestamp:new Date()}]);const[inputText,setInputText]=useState('');const[isTyping,setIsTyping]=useState(false);const messagesEndRef=useRef(null);const scrollToBottom=()=>{var _messagesEndRef$curre;(_messagesEndRef$curre=messagesEndRef.current)===null||_messagesEndRef$curre===void 0?void 0:_messagesEndRef$curre.scrollIntoView({behavior:\"smooth\"});};useEffect(()=>{scrollToBottom();},[messages]);// Real AI responses using server-side GenAI proxy\nconst getAIResponse=async userMessage=>{setIsTyping(true);try{var _json$data,_json$data2,_json$data2$raw,_json$data3,_json$data3$raw;const resp=await fetch('http://localhost:4000/genai/chat',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({prompt:userMessage})});const json=await resp.json();// Try to extract a sensible text field from responses\nconst aiText=(json===null||json===void 0?void 0:(_json$data=json.data)===null||_json$data===void 0?void 0:_json$data.text)||(json===null||json===void 0?void 0:(_json$data2=json.data)===null||_json$data2===void 0?void 0:(_json$data2$raw=_json$data2.raw)===null||_json$data2$raw===void 0?void 0:_json$data2$raw.text)||(json===null||json===void 0?void 0:(_json$data3=json.data)===null||_json$data3===void 0?void 0:(_json$data3$raw=_json$data3.raw)===null||_json$data3$raw===void 0?void 0:_json$data3$raw.candidates)&&json.data.raw.candidates.map(c=>c.output||'').join('\\n')||'Xin lỗi, tôi chưa nhận được phản hồi từ AI.';return aiText;}catch(err){console.error('AI fetch error',err);return'Lỗi khi gọi AI, thử lại sau.';}finally{setIsTyping(false);}};const handleSendMessage=async()=>{if(!inputText.trim())return;const userMessage={id:Date.now(),text:inputText,sender:'user',timestamp:new Date()};setMessages(prev=>[...prev,userMessage]);setInputText('');const botResponse=await getAIResponse(inputText);const botMessage={id:Date.now()+1,text:botResponse,sender:'bot',timestamp:new Date()};setMessages(prev=>[...prev,botMessage]);};const handleKeyPress=e=>{if(e.key==='Enter'&&!e.shiftKey){e.preventDefault();handleSendMessage();}};const quickQuestions=[\"iPhone nào tốt nhất?\",\"So sánh Samsung và iPhone\",\"Điện thoại nào pin tốt?\",\"Camera nào chụp đêm tốt?\"];return/*#__PURE__*/_jsxs(\"div\",{className:\"ai-chatbot \".concat(isOpen?'open':''),children:[/*#__PURE__*/_jsxs(\"button\",{className:\"chat-toggle\",onClick:()=>setIsOpen(!isOpen),children:[/*#__PURE__*/_jsx(\"span\",{className:\"chat-icon\",children:\"\\uD83E\\uDD16\"}),/*#__PURE__*/_jsx(\"span\",{className:\"chat-text\",children:\"AI Assistant\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-window\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chat-header\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"bot-info\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"bot-avatar\",children:\"\\uD83E\\uDD16\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"bot-details\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"AI Assistant\"}),/*#__PURE__*/_jsx(\"span\",{className:\"status\",children:\"\\u0110ang ho\\u1EA1t \\u0111\\u1ED9ng\"})]})]}),/*#__PURE__*/_jsx(\"button\",{className:\"close-btn\",onClick:()=>setIsOpen(false),children:\"\\u2715\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-messages\",children:[messages.map(message=>/*#__PURE__*/_jsx(\"div\",{className:\"message \".concat(message.sender),children:/*#__PURE__*/_jsxs(\"div\",{className:\"message-content\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"message-text\",children:message.text.split('\\n').map((line,index)=>/*#__PURE__*/_jsxs(\"div\",{children:[line,index<message.text.split('\\n').length-1&&/*#__PURE__*/_jsx(\"br\",{})]},index))}),/*#__PURE__*/_jsx(\"div\",{className:\"message-time\",children:message.timestamp.toLocaleTimeString('vi-VN',{hour:'2-digit',minute:'2-digit'})})]})},message.id)),isTyping&&/*#__PURE__*/_jsx(\"div\",{className:\"message bot\",children:/*#__PURE__*/_jsx(\"div\",{className:\"message-content\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"typing-indicator\",children:[/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"span\",{}),/*#__PURE__*/_jsx(\"span\",{})]})})}),/*#__PURE__*/_jsx(\"div\",{ref:messagesEndRef})]}),messages.length===1&&/*#__PURE__*/_jsxs(\"div\",{className:\"quick-questions\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"C\\xE2u h\\u1ECFi th\\u01B0\\u1EDDng g\\u1EB7p:\"}),/*#__PURE__*/_jsx(\"div\",{className:\"question-buttons\",children:quickQuestions.map((question,index)=>/*#__PURE__*/_jsx(\"button\",{className:\"question-btn\",onClick:()=>setInputText(question),children:question},index))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-input\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:inputText,onChange:e=>setInputText(e.target.value),onKeyPress:handleKeyPress,placeholder:\"Nh\\u1EADp c\\xE2u h\\u1ECFi c\\u1EE7a b\\u1EA1n...\",className:\"message-input\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleSendMessage,className:\"send-btn\",disabled:!inputText.trim(),children:/*#__PURE__*/_jsx(\"span\",{children:\"\\uD83D\\uDCE4\"})})]})]})]});}export default AIChatbot;","map":{"version":3,"names":["React","useState","useEffect","useRef","jsx","_jsx","jsxs","_jsxs","AIChatbot","_ref","products","isOpen","setIsOpen","messages","setMessages","id","text","sender","timestamp","Date","inputText","setInputText","isTyping","setIsTyping","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","getAIResponse","userMessage","_json$data","_json$data2","_json$data2$raw","_json$data3","_json$data3$raw","resp","fetch","method","headers","body","JSON","stringify","prompt","json","aiText","data","raw","candidates","map","c","output","join","err","console","error","handleSendMessage","trim","now","prev","botResponse","botMessage","handleKeyPress","e","key","shiftKey","preventDefault","quickQuestions","className","concat","children","onClick","message","split","line","index","length","toLocaleTimeString","hour","minute","ref","question","type","value","onChange","target","onKeyPress","placeholder","disabled"],"sources":["C:/Users/admin/Download/project-long/cellphones/client-cellphones/src/components/AIChatbot/AIChatbot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './AIChatbot.css';\r\n\r\nfunction AIChatbot({ products = [] }) {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [messages, setMessages] = useState([\r\n        {\r\n            id: 1,\r\n            text: \"Xin chào! Tôi là AI Assistant của Cellphones. Tôi có thể giúp bạn tìm hiểu về các sản phẩm điện thoại, so sánh tính năng, và đưa ra gợi ý phù hợp. Bạn muốn hỏi gì?\",\r\n            sender: 'bot',\r\n            timestamp: new Date()\r\n        }\r\n    ]);\r\n    const [inputText, setInputText] = useState('');\r\n    const [isTyping, setIsTyping] = useState(false);\r\n    const messagesEndRef = useRef(null);\r\n\r\n    const scrollToBottom = () => {\r\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    };\r\n\r\n    useEffect(() => {\r\n        scrollToBottom();\r\n    }, [messages]);\r\n\r\n    // Real AI responses using server-side GenAI proxy\r\n    const getAIResponse = async (userMessage) => {\r\n        setIsTyping(true);\r\n        try {\r\n            const resp = await fetch('http://localhost:4000/genai/chat', {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ prompt: userMessage })\r\n            });\r\n\r\n            const json = await resp.json();\r\n            // Try to extract a sensible text field from responses\r\n            const aiText = json?.data?.text || json?.data?.raw?.text ||\r\n                (json?.data?.raw?.candidates && json.data.raw.candidates.map(c=>c.output||'').join('\\n')) ||\r\n                'Xin lỗi, tôi chưa nhận được phản hồi từ AI.';\r\n\r\n            return aiText;\r\n        } catch (err) {\r\n            console.error('AI fetch error', err);\r\n            return 'Lỗi khi gọi AI, thử lại sau.';\r\n        } finally {\r\n            setIsTyping(false);\r\n        }\r\n    };\r\n\r\n    const handleSendMessage = async () => {\r\n        if (!inputText.trim()) return;\r\n\r\n        const userMessage = {\r\n            id: Date.now(),\r\n            text: inputText,\r\n            sender: 'user',\r\n            timestamp: new Date()\r\n        };\r\n\r\n        setMessages(prev => [...prev, userMessage]);\r\n        setInputText('');\r\n\r\n        const botResponse = await getAIResponse(inputText);\r\n        \r\n        const botMessage = {\r\n            id: Date.now() + 1,\r\n            text: botResponse,\r\n            sender: 'bot',\r\n            timestamp: new Date()\r\n        };\r\n\r\n        setMessages(prev => [...prev, botMessage]);\r\n    };\r\n\r\n    const handleKeyPress = (e) => {\r\n        if (e.key === 'Enter' && !e.shiftKey) {\r\n            e.preventDefault();\r\n            handleSendMessage();\r\n        }\r\n    };\r\n\r\n    const quickQuestions = [\r\n        \"iPhone nào tốt nhất?\",\r\n        \"So sánh Samsung và iPhone\",\r\n        \"Điện thoại nào pin tốt?\",\r\n        \"Camera nào chụp đêm tốt?\"\r\n    ];\r\n\r\n    return (\r\n        <div className={`ai-chatbot ${isOpen ? 'open' : ''}`}>\r\n            {/* Chat Button */}\r\n            <button \r\n                className=\"chat-toggle\"\r\n                onClick={() => setIsOpen(!isOpen)}\r\n            >\r\n                <span className=\"chat-icon\">🤖</span>\r\n                <span className=\"chat-text\">AI Assistant</span>\r\n            </button>\r\n\r\n            {/* Chat Window */}\r\n            <div className=\"chat-window\">\r\n                <div className=\"chat-header\">\r\n                    <div className=\"bot-info\">\r\n                        <div className=\"bot-avatar\">🤖</div>\r\n                        <div className=\"bot-details\">\r\n                            <h3>AI Assistant</h3>\r\n                            <span className=\"status\">Đang hoạt động</span>\r\n                        </div>\r\n                    </div>\r\n                    <button \r\n                        className=\"close-btn\"\r\n                        onClick={() => setIsOpen(false)}\r\n                    >\r\n                        ✕\r\n                    </button>\r\n                </div>\r\n\r\n                <div className=\"chat-messages\">\r\n                    {messages.map((message) => (\r\n                        <div \r\n                            key={message.id} \r\n                            className={`message ${message.sender}`}\r\n                        >\r\n                            <div className=\"message-content\">\r\n                                <div className=\"message-text\">\r\n                                    {message.text.split('\\n').map((line, index) => (\r\n                                        <div key={index}>\r\n                                            {line}\r\n                                            {index < message.text.split('\\n').length - 1 && <br />}\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                                <div className=\"message-time\">\r\n                                    {message.timestamp.toLocaleTimeString('vi-VN', { \r\n                                        hour: '2-digit', \r\n                                        minute: '2-digit' \r\n                                    })}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                    \r\n                    {isTyping && (\r\n                        <div className=\"message bot\">\r\n                            <div className=\"message-content\">\r\n                                <div className=\"typing-indicator\">\r\n                                    <span></span>\r\n                                    <span></span>\r\n                                    <span></span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                    \r\n                    <div ref={messagesEndRef} />\r\n                </div>\r\n\r\n                {/* Quick Questions */}\r\n                {messages.length === 1 && (\r\n                    <div className=\"quick-questions\">\r\n                        <h4>Câu hỏi thường gặp:</h4>\r\n                        <div className=\"question-buttons\">\r\n                            {quickQuestions.map((question, index) => (\r\n                                <button \r\n                                    key={index}\r\n                                    className=\"question-btn\"\r\n                                    onClick={() => setInputText(question)}\r\n                                >\r\n                                    {question}\r\n                                </button>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n                <div className=\"chat-input\">\r\n                    <input\r\n                        type=\"text\"\r\n                        value={inputText}\r\n                        onChange={(e) => setInputText(e.target.value)}\r\n                        onKeyPress={handleKeyPress}\r\n                        placeholder=\"Nhập câu hỏi của bạn...\"\r\n                        className=\"message-input\"\r\n                    />\r\n                    <button \r\n                        onClick={handleSendMessage}\r\n                        className=\"send-btn\"\r\n                        disabled={!inputText.trim()}\r\n                    >\r\n                        <span>📤</span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AIChatbot;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,CAAEC,MAAM,KAAQ,OAAO,CAC1D,MAAO,iBAAiB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEzB,QAAS,CAAAC,SAASA,CAAAC,IAAA,CAAoB,IAAnB,CAAEC,QAAQ,CAAG,EAAG,CAAC,CAAAD,IAAA,CAChC,KAAM,CAACE,MAAM,CAAEC,SAAS,CAAC,CAAGX,QAAQ,CAAC,KAAK,CAAC,CAC3C,KAAM,CAACY,QAAQ,CAAEC,WAAW,CAAC,CAAGb,QAAQ,CAAC,CACrC,CACIc,EAAE,CAAE,CAAC,CACLC,IAAI,CAAE,qKAAqK,CAC3KC,MAAM,CAAE,KAAK,CACbC,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CACxB,CAAC,CACJ,CAAC,CACF,KAAM,CAACC,SAAS,CAAEC,YAAY,CAAC,CAAGpB,QAAQ,CAAC,EAAE,CAAC,CAC9C,KAAM,CAACqB,QAAQ,CAAEC,WAAW,CAAC,CAAGtB,QAAQ,CAAC,KAAK,CAAC,CAC/C,KAAM,CAAAuB,cAAc,CAAGrB,MAAM,CAAC,IAAI,CAAC,CAEnC,KAAM,CAAAsB,cAAc,CAAGA,CAAA,GAAM,KAAAC,qBAAA,CACzB,CAAAA,qBAAA,CAAAF,cAAc,CAACG,OAAO,UAAAD,qBAAA,iBAAtBA,qBAAA,CAAwBE,cAAc,CAAC,CAAEC,QAAQ,CAAE,QAAS,CAAC,CAAC,CAClE,CAAC,CAED3B,SAAS,CAAC,IAAM,CACZuB,cAAc,CAAC,CAAC,CACpB,CAAC,CAAE,CAACZ,QAAQ,CAAC,CAAC,CAEd;AACA,KAAM,CAAAiB,aAAa,CAAG,KAAO,CAAAC,WAAW,EAAK,CACzCR,WAAW,CAAC,IAAI,CAAC,CACjB,GAAI,KAAAS,UAAA,CAAAC,WAAA,CAAAC,eAAA,CAAAC,WAAA,CAAAC,eAAA,CACA,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAC,KAAK,CAAC,kCAAkC,CAAE,CACzDC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAAC,CAC/CC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAEC,MAAM,CAAEb,WAAY,CAAC,CAChD,CAAC,CAAC,CAEF,KAAM,CAAAc,IAAI,CAAG,KAAM,CAAAR,IAAI,CAACQ,IAAI,CAAC,CAAC,CAC9B;AACA,KAAM,CAAAC,MAAM,CAAG,CAAAD,IAAI,SAAJA,IAAI,kBAAAb,UAAA,CAAJa,IAAI,CAAEE,IAAI,UAAAf,UAAA,iBAAVA,UAAA,CAAYhB,IAAI,IAAI6B,IAAI,SAAJA,IAAI,kBAAAZ,WAAA,CAAJY,IAAI,CAAEE,IAAI,UAAAd,WAAA,kBAAAC,eAAA,CAAVD,WAAA,CAAYe,GAAG,UAAAd,eAAA,iBAAfA,eAAA,CAAiBlB,IAAI,GACnD,CAAA6B,IAAI,SAAJA,IAAI,kBAAAV,WAAA,CAAJU,IAAI,CAAEE,IAAI,UAAAZ,WAAA,kBAAAC,eAAA,CAAVD,WAAA,CAAYa,GAAG,UAAAZ,eAAA,iBAAfA,eAAA,CAAiBa,UAAU,GAAIJ,IAAI,CAACE,IAAI,CAACC,GAAG,CAACC,UAAU,CAACC,GAAG,CAACC,CAAC,EAAEA,CAAC,CAACC,MAAM,EAAE,EAAE,CAAC,CAACC,IAAI,CAAC,IAAI,CAAE,EACzF,6CAA6C,CAEjD,MAAO,CAAAP,MAAM,CACjB,CAAE,MAAOQ,GAAG,CAAE,CACVC,OAAO,CAACC,KAAK,CAAC,gBAAgB,CAAEF,GAAG,CAAC,CACpC,MAAO,8BAA8B,CACzC,CAAC,OAAS,CACN/B,WAAW,CAAC,KAAK,CAAC,CACtB,CACJ,CAAC,CAED,KAAM,CAAAkC,iBAAiB,CAAG,KAAAA,CAAA,GAAY,CAClC,GAAI,CAACrC,SAAS,CAACsC,IAAI,CAAC,CAAC,CAAE,OAEvB,KAAM,CAAA3B,WAAW,CAAG,CAChBhB,EAAE,CAAEI,IAAI,CAACwC,GAAG,CAAC,CAAC,CACd3C,IAAI,CAAEI,SAAS,CACfH,MAAM,CAAE,MAAM,CACdC,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CACxB,CAAC,CAEDL,WAAW,CAAC8C,IAAI,EAAI,CAAC,GAAGA,IAAI,CAAE7B,WAAW,CAAC,CAAC,CAC3CV,YAAY,CAAC,EAAE,CAAC,CAEhB,KAAM,CAAAwC,WAAW,CAAG,KAAM,CAAA/B,aAAa,CAACV,SAAS,CAAC,CAElD,KAAM,CAAA0C,UAAU,CAAG,CACf/C,EAAE,CAAEI,IAAI,CAACwC,GAAG,CAAC,CAAC,CAAG,CAAC,CAClB3C,IAAI,CAAE6C,WAAW,CACjB5C,MAAM,CAAE,KAAK,CACbC,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CACxB,CAAC,CAEDL,WAAW,CAAC8C,IAAI,EAAI,CAAC,GAAGA,IAAI,CAAEE,UAAU,CAAC,CAAC,CAC9C,CAAC,CAED,KAAM,CAAAC,cAAc,CAAIC,CAAC,EAAK,CAC1B,GAAIA,CAAC,CAACC,GAAG,GAAK,OAAO,EAAI,CAACD,CAAC,CAACE,QAAQ,CAAE,CAClCF,CAAC,CAACG,cAAc,CAAC,CAAC,CAClBV,iBAAiB,CAAC,CAAC,CACvB,CACJ,CAAC,CAED,KAAM,CAAAW,cAAc,CAAG,CACnB,sBAAsB,CACtB,2BAA2B,CAC3B,yBAAyB,CACzB,0BAA0B,CAC7B,CAED,mBACI7D,KAAA,QAAK8D,SAAS,eAAAC,MAAA,CAAgB3D,MAAM,CAAG,MAAM,CAAG,EAAE,CAAG,CAAA4D,QAAA,eAEjDhE,KAAA,WACI8D,SAAS,CAAC,aAAa,CACvBG,OAAO,CAAEA,CAAA,GAAM5D,SAAS,CAAC,CAACD,MAAM,CAAE,CAAA4D,QAAA,eAElClE,IAAA,SAAMgE,SAAS,CAAC,WAAW,CAAAE,QAAA,CAAC,cAAE,CAAM,CAAC,cACrClE,IAAA,SAAMgE,SAAS,CAAC,WAAW,CAAAE,QAAA,CAAC,cAAY,CAAM,CAAC,EAC3C,CAAC,cAGThE,KAAA,QAAK8D,SAAS,CAAC,aAAa,CAAAE,QAAA,eACxBhE,KAAA,QAAK8D,SAAS,CAAC,aAAa,CAAAE,QAAA,eACxBhE,KAAA,QAAK8D,SAAS,CAAC,UAAU,CAAAE,QAAA,eACrBlE,IAAA,QAAKgE,SAAS,CAAC,YAAY,CAAAE,QAAA,CAAC,cAAE,CAAK,CAAC,cACpChE,KAAA,QAAK8D,SAAS,CAAC,aAAa,CAAAE,QAAA,eACxBlE,IAAA,OAAAkE,QAAA,CAAI,cAAY,CAAI,CAAC,cACrBlE,IAAA,SAAMgE,SAAS,CAAC,QAAQ,CAAAE,QAAA,CAAC,oCAAc,CAAM,CAAC,EAC7C,CAAC,EACL,CAAC,cACNlE,IAAA,WACIgE,SAAS,CAAC,WAAW,CACrBG,OAAO,CAAEA,CAAA,GAAM5D,SAAS,CAAC,KAAK,CAAE,CAAA2D,QAAA,CACnC,QAED,CAAQ,CAAC,EACR,CAAC,cAENhE,KAAA,QAAK8D,SAAS,CAAC,eAAe,CAAAE,QAAA,EACzB1D,QAAQ,CAACqC,GAAG,CAAEuB,OAAO,eAClBpE,IAAA,QAEIgE,SAAS,YAAAC,MAAA,CAAaG,OAAO,CAACxD,MAAM,CAAG,CAAAsD,QAAA,cAEvChE,KAAA,QAAK8D,SAAS,CAAC,iBAAiB,CAAAE,QAAA,eAC5BlE,IAAA,QAAKgE,SAAS,CAAC,cAAc,CAAAE,QAAA,CACxBE,OAAO,CAACzD,IAAI,CAAC0D,KAAK,CAAC,IAAI,CAAC,CAACxB,GAAG,CAAC,CAACyB,IAAI,CAAEC,KAAK,gBACtCrE,KAAA,QAAAgE,QAAA,EACKI,IAAI,CACJC,KAAK,CAAGH,OAAO,CAACzD,IAAI,CAAC0D,KAAK,CAAC,IAAI,CAAC,CAACG,MAAM,CAAG,CAAC,eAAIxE,IAAA,QAAK,CAAC,GAFhDuE,KAGL,CACR,CAAC,CACD,CAAC,cACNvE,IAAA,QAAKgE,SAAS,CAAC,cAAc,CAAAE,QAAA,CACxBE,OAAO,CAACvD,SAAS,CAAC4D,kBAAkB,CAAC,OAAO,CAAE,CAC3CC,IAAI,CAAE,SAAS,CACfC,MAAM,CAAE,SACZ,CAAC,CAAC,CACD,CAAC,EACL,CAAC,EAlBDP,OAAO,CAAC1D,EAmBZ,CACR,CAAC,CAEDO,QAAQ,eACLjB,IAAA,QAAKgE,SAAS,CAAC,aAAa,CAAAE,QAAA,cACxBlE,IAAA,QAAKgE,SAAS,CAAC,iBAAiB,CAAAE,QAAA,cAC5BhE,KAAA,QAAK8D,SAAS,CAAC,kBAAkB,CAAAE,QAAA,eAC7BlE,IAAA,UAAY,CAAC,cACbA,IAAA,UAAY,CAAC,cACbA,IAAA,UAAY,CAAC,EACZ,CAAC,CACL,CAAC,CACL,CACR,cAEDA,IAAA,QAAK4E,GAAG,CAAEzD,cAAe,CAAE,CAAC,EAC3B,CAAC,CAGLX,QAAQ,CAACgE,MAAM,GAAK,CAAC,eAClBtE,KAAA,QAAK8D,SAAS,CAAC,iBAAiB,CAAAE,QAAA,eAC5BlE,IAAA,OAAAkE,QAAA,CAAI,4CAAmB,CAAI,CAAC,cAC5BlE,IAAA,QAAKgE,SAAS,CAAC,kBAAkB,CAAAE,QAAA,CAC5BH,cAAc,CAAClB,GAAG,CAAC,CAACgC,QAAQ,CAAEN,KAAK,gBAChCvE,IAAA,WAEIgE,SAAS,CAAC,cAAc,CACxBG,OAAO,CAAEA,CAAA,GAAMnD,YAAY,CAAC6D,QAAQ,CAAE,CAAAX,QAAA,CAErCW,QAAQ,EAJJN,KAKD,CACX,CAAC,CACD,CAAC,EACL,CACR,cAEDrE,KAAA,QAAK8D,SAAS,CAAC,YAAY,CAAAE,QAAA,eACvBlE,IAAA,UACI8E,IAAI,CAAC,MAAM,CACXC,KAAK,CAAEhE,SAAU,CACjBiE,QAAQ,CAAGrB,CAAC,EAAK3C,YAAY,CAAC2C,CAAC,CAACsB,MAAM,CAACF,KAAK,CAAE,CAC9CG,UAAU,CAAExB,cAAe,CAC3ByB,WAAW,CAAC,gDAAyB,CACrCnB,SAAS,CAAC,eAAe,CAC5B,CAAC,cACFhE,IAAA,WACImE,OAAO,CAAEf,iBAAkB,CAC3BY,SAAS,CAAC,UAAU,CACpBoB,QAAQ,CAAE,CAACrE,SAAS,CAACsC,IAAI,CAAC,CAAE,CAAAa,QAAA,cAE5BlE,IAAA,SAAAkE,QAAA,CAAM,cAAE,CAAM,CAAC,CACX,CAAC,EACR,CAAC,EACL,CAAC,EACL,CAAC,CAEd,CAEA,cAAe,CAAA/D,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module"}