{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport * as React from 'react';\nimport warning from \"rc-util/es/warning\";\nimport { convertChildrenToData } from '../utils/legacyUtil';\nvar MAX_WARNING_TIMES = 10;\nfunction parseSimpleTreeData(treeData, _ref) {\n  var id = _ref.id,\n    pId = _ref.pId,\n    rootPId = _ref.rootPId;\n  var keyNodes = {};\n  var rootNodeList = []; // Fill in the map\n\n  var nodeList = treeData.map(function (node) {\n    var clone = _objectSpread({}, node);\n    var key = clone[id];\n    keyNodes[key] = clone;\n    clone.key = clone.key || key;\n    return clone;\n  }); // Connect tree\n\n  nodeList.forEach(function (node) {\n    var parentKey = node[pId];\n    var parent = keyNodes[parentKey]; // Fill parent\n\n    if (parent) {\n      parent.children = parent.children || [];\n      parent.children.push(node);\n    } // Fill root tree node\n\n    if (parentKey === rootPId || !parent && rootPId === null) {\n      rootNodeList.push(node);\n    }\n  });\n  return rootNodeList;\n}\n/**\r\n * Format `treeData` with `value` & `key` which is used for calculation\r\n */\n\nfunction formatTreeData(treeData, getLabelProp) {\n  var warningTimes = 0;\n  var valueSet = new Set();\n  function dig(dataNodes) {\n    return (dataNodes || []).map(function (node) {\n      var key = node.key,\n        value = node.value,\n        children = node.children,\n        rest = _objectWithoutProperties(node, [\"key\", \"value\", \"children\"]);\n      var mergedValue = 'value' in node ? value : key;\n      var dataNode = _objectSpread(_objectSpread({}, rest), {}, {\n        key: key !== null && key !== undefined ? key : mergedValue,\n        value: mergedValue,\n        title: getLabelProp(node)\n      }); // Check `key` & `value` and warning user\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (key !== null && key !== undefined && value !== undefined && String(key) !== String(value) && warningTimes < MAX_WARNING_TIMES) {\n          warningTimes += 1;\n          warning(false, \"`key` or `value` with TreeNode must be the same or you can remove one of them. key: \".concat(key, \", value: \").concat(value, \".\"));\n        }\n        warning(!valueSet.has(value), \"Same `value` exist in the tree: \".concat(value));\n        valueSet.add(value);\n      }\n      if ('children' in node) {\n        dataNode.children = dig(children);\n      }\n      return dataNode;\n    });\n  }\n  return dig(treeData);\n}\n/**\r\n * Convert `treeData` or `children` into formatted `treeData`.\r\n * Will not re-calculate if `treeData` or `children` not change.\r\n */\n\nexport default function useTreeData(treeData, children, _ref2) {\n  var getLabelProp = _ref2.getLabelProp,\n    simpleMode = _ref2.simpleMode;\n  var cacheRef = React.useRef({});\n  if (treeData) {\n    cacheRef.current.formatTreeData = cacheRef.current.treeData === treeData ? cacheRef.current.formatTreeData : formatTreeData(simpleMode ? parseSimpleTreeData(treeData, _objectSpread({\n      id: 'id',\n      pId: 'pId',\n      rootPId: null\n    }, simpleMode !== true ? simpleMode : {})) : treeData, getLabelProp);\n    cacheRef.current.treeData = treeData;\n  } else {\n    cacheRef.current.formatTreeData = cacheRef.current.children === children ? cacheRef.current.formatTreeData : formatTreeData(convertChildrenToData(children), getLabelProp);\n  }\n  return cacheRef.current.formatTreeData;\n}","map":{"version":3,"names":["_objectWithoutProperties","_objectSpread","React","warning","convertChildrenToData","MAX_WARNING_TIMES","parseSimpleTreeData","treeData","_ref","id","pId","rootPId","keyNodes","rootNodeList","nodeList","map","node","clone","key","forEach","parentKey","parent","children","push","formatTreeData","getLabelProp","warningTimes","valueSet","Set","dig","dataNodes","value","rest","mergedValue","dataNode","undefined","title","process","env","NODE_ENV","String","concat","has","add","useTreeData","_ref2","simpleMode","cacheRef","useRef","current"],"sources":["C:/Users/admin/Download/project-long/cellphones/client-cellphones/node_modules/rc-tree-select/es/hooks/useTreeData.js"],"sourcesContent":["import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\r\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\r\nimport * as React from 'react';\r\nimport warning from \"rc-util/es/warning\";\r\nimport { convertChildrenToData } from '../utils/legacyUtil';\r\nvar MAX_WARNING_TIMES = 10;\r\n\r\nfunction parseSimpleTreeData(treeData, _ref) {\r\n  var id = _ref.id,\r\n      pId = _ref.pId,\r\n      rootPId = _ref.rootPId;\r\n  var keyNodes = {};\r\n  var rootNodeList = []; // Fill in the map\r\n\r\n  var nodeList = treeData.map(function (node) {\r\n    var clone = _objectSpread({}, node);\r\n\r\n    var key = clone[id];\r\n    keyNodes[key] = clone;\r\n    clone.key = clone.key || key;\r\n    return clone;\r\n  }); // Connect tree\r\n\r\n  nodeList.forEach(function (node) {\r\n    var parentKey = node[pId];\r\n    var parent = keyNodes[parentKey]; // Fill parent\r\n\r\n    if (parent) {\r\n      parent.children = parent.children || [];\r\n      parent.children.push(node);\r\n    } // Fill root tree node\r\n\r\n\r\n    if (parentKey === rootPId || !parent && rootPId === null) {\r\n      rootNodeList.push(node);\r\n    }\r\n  });\r\n  return rootNodeList;\r\n}\r\n/**\r\n * Format `treeData` with `value` & `key` which is used for calculation\r\n */\r\n\r\n\r\nfunction formatTreeData(treeData, getLabelProp) {\r\n  var warningTimes = 0;\r\n  var valueSet = new Set();\r\n\r\n  function dig(dataNodes) {\r\n    return (dataNodes || []).map(function (node) {\r\n      var key = node.key,\r\n          value = node.value,\r\n          children = node.children,\r\n          rest = _objectWithoutProperties(node, [\"key\", \"value\", \"children\"]);\r\n\r\n      var mergedValue = 'value' in node ? value : key;\r\n\r\n      var dataNode = _objectSpread(_objectSpread({}, rest), {}, {\r\n        key: key !== null && key !== undefined ? key : mergedValue,\r\n        value: mergedValue,\r\n        title: getLabelProp(node)\r\n      }); // Check `key` & `value` and warning user\r\n\r\n\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        if (key !== null && key !== undefined && value !== undefined && String(key) !== String(value) && warningTimes < MAX_WARNING_TIMES) {\r\n          warningTimes += 1;\r\n          warning(false, \"`key` or `value` with TreeNode must be the same or you can remove one of them. key: \".concat(key, \", value: \").concat(value, \".\"));\r\n        }\r\n\r\n        warning(!valueSet.has(value), \"Same `value` exist in the tree: \".concat(value));\r\n        valueSet.add(value);\r\n      }\r\n\r\n      if ('children' in node) {\r\n        dataNode.children = dig(children);\r\n      }\r\n\r\n      return dataNode;\r\n    });\r\n  }\r\n\r\n  return dig(treeData);\r\n}\r\n/**\r\n * Convert `treeData` or `children` into formatted `treeData`.\r\n * Will not re-calculate if `treeData` or `children` not change.\r\n */\r\n\r\n\r\nexport default function useTreeData(treeData, children, _ref2) {\r\n  var getLabelProp = _ref2.getLabelProp,\r\n      simpleMode = _ref2.simpleMode;\r\n  var cacheRef = React.useRef({});\r\n\r\n  if (treeData) {\r\n    cacheRef.current.formatTreeData = cacheRef.current.treeData === treeData ? cacheRef.current.formatTreeData : formatTreeData(simpleMode ? parseSimpleTreeData(treeData, _objectSpread({\r\n      id: 'id',\r\n      pId: 'pId',\r\n      rootPId: null\r\n    }, simpleMode !== true ? simpleMode : {})) : treeData, getLabelProp);\r\n    cacheRef.current.treeData = treeData;\r\n  } else {\r\n    cacheRef.current.formatTreeData = cacheRef.current.children === children ? cacheRef.current.formatTreeData : formatTreeData(convertChildrenToData(children), getLabelProp);\r\n  }\r\n\r\n  return cacheRef.current.formatTreeData;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}