import React, { useState, useEffect, useRef } from 'react';
import './AIChatbot.css';

function AIChatbot({ products = [] }) {
    const [isOpen, setIsOpen] = useState(false);
    const [messages, setMessages] = useState([
        {
            id: 1,
            text: "Xin ch√†o! T√¥i l√† AI Assistant c·ªßa Cellphones. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ c√°c s·∫£n ph·∫©m ƒëi·ªán tho·∫°i, so s√°nh t√≠nh nƒÉng, v√† ƒë∆∞a ra g·ª£i √Ω ph√π h·ª£p. B·∫°n mu·ªën h·ªèi g√¨?",
            sender: 'bot',
            timestamp: new Date()
        }
    ]);
    const [inputText, setInputText] = useState('');
    const [isTyping, setIsTyping] = useState(false);
    const messagesEndRef = useRef(null);

    const scrollToBottom = () => {
        messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
    };

    useEffect(() => {
        scrollToBottom();
    }, [messages]);

    // Mock AI responses - s·∫Ω ƒë∆∞·ª£c thay th·∫ø b·∫±ng API th·ª±c t·∫ø
    const getAIResponse = async (userMessage) => {
        setIsTyping(true);
        
        // Simulate API delay
        await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));
        
        const lowerMessage = userMessage.toLowerCase();
        let response = '';
        
        // Simple keyword-based responses (s·∫Ω ƒë∆∞·ª£c thay th·∫ø b·∫±ng AI th·ª±c t·∫ø)
        if (lowerMessage.includes('iphone') || lowerMessage.includes('apple')) {
            response = `iPhone l√† d√≤ng ƒëi·ªán tho·∫°i cao c·∫•p c·ªßa Apple v·ªõi nhi·ªÅu t√≠nh nƒÉng n·ªïi b·∫≠t:
            
üì± **iPhone 15 Pro Max** - 25.990.000ƒë
‚Ä¢ Chip A17 Pro m·∫°nh m·∫Ω
‚Ä¢ Camera 48MP v·ªõi zoom 5x
‚Ä¢ M√†n h√¨nh Super Retina XDR 6.7"
‚Ä¢ Pin s·ª≠ d·ª•ng c·∫£ ng√†y

üì± **iPhone 14** - 18.990.000ƒë  
‚Ä¢ Chip A15 Bionic
‚Ä¢ Camera 12MP ch·∫•t l∆∞·ª£ng cao
‚Ä¢ M√†n h√¨nh 6.1" OLED
‚Ä¢ Face ID b·∫£o m·∫≠t cao

B·∫°n quan t√¢m ƒë·∫øn model n√†o? T√¥i c√≥ th·ªÉ so s√°nh chi ti·∫øt h∆°n!`;
        } else if (lowerMessage.includes('samsung') || lowerMessage.includes('galaxy')) {
            response = `Samsung Galaxy l√† d√≤ng ƒëi·ªán tho·∫°i Android h√†ng ƒë·∫ßu v·ªõi nhi·ªÅu l·ª±a ch·ªçn:

üì± **Galaxy S23 Ultra** - 22.990.000ƒë
‚Ä¢ Chip Snapdragon 8 Gen 2
‚Ä¢ Camera 200MP v·ªõi S Pen
‚Ä¢ M√†n h√¨nh Dynamic AMOLED 6.8"
‚Ä¢ Pin 5000mAh

üì± **Galaxy A54** - 8.990.000ƒë
‚Ä¢ Chip Exynos 1380
‚Ä¢ Camera 50MP OIS
‚Ä¢ M√†n h√¨nh Super AMOLED 6.4"
‚Ä¢ Pin 5000mAh

B·∫°n mu·ªën t√¨m hi·ªÉu v·ªÅ model n√†o?`;
        } else if (lowerMessage.includes('gi√°') || lowerMessage.includes('price') || lowerMessage.includes('ti·ªÅn')) {
            response = `T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m s·∫£n ph·∫©m theo ng√¢n s√°ch:

üí∞ **D∆∞·ªõi 5 tri·ªáu:**
‚Ä¢ Samsung Galaxy A14 - 3.990.000ƒë
‚Ä¢ Xiaomi Redmi Note 12 - 4.290.000ƒë

üí∞ **5-10 tri·ªáu:**
‚Ä¢ Samsung Galaxy A54 - 8.990.000ƒë
‚Ä¢ iPhone 12 - 9.990.000ƒë

üí∞ **10-20 tri·ªáu:**
‚Ä¢ iPhone 13 - 15.990.000ƒë
‚Ä¢ Samsung Galaxy S23 - 18.990.000ƒë

üí∞ **Tr√™n 20 tri·ªáu:**
‚Ä¢ iPhone 15 Pro Max - 25.990.000ƒë
‚Ä¢ Samsung Galaxy S23 Ultra - 22.990.000ƒë

B·∫°n c√≥ ng√¢n s√°ch bao nhi√™u? T√¥i s·∫Ω g·ª£i √Ω s·∫£n ph·∫©m ph√π h·ª£p!`;
        } else if (lowerMessage.includes('so s√°nh') || lowerMessage.includes('compare')) {
            response = `T√¥i c√≥ th·ªÉ so s√°nh c√°c s·∫£n ph·∫©m cho b·∫°n! H√£y cho t√¥i bi·∫øt:

üîç **B·∫°n mu·ªën so s√°nh:**
‚Ä¢ iPhone vs Samsung
‚Ä¢ C√°c model trong c√πng h√£ng
‚Ä¢ S·∫£n ph·∫©m c·ª• th·ªÉ n√†o

üìä **Ti√™u ch√≠ so s√°nh:**
‚Ä¢ Gi√° c·∫£
‚Ä¢ Camera
‚Ä¢ Hi·ªáu nƒÉng
‚Ä¢ Pin
‚Ä¢ M√†n h√¨nh

V√≠ d·ª•: "So s√°nh iPhone 15 Pro Max v√† Galaxy S23 Ultra v·ªÅ camera"`;
        } else if (lowerMessage.includes('camera') || lowerMessage.includes('ch·ª•p ·∫£nh')) {
            response = `üì∏ **Top ƒëi·ªán tho·∫°i c√≥ camera t·ªët nh·∫•t:**

ü•á **iPhone 15 Pro Max** - Camera 48MP
‚Ä¢ Zoom quang h·ªçc 5x
‚Ä¢ Ch·∫ø ƒë·ªô ch·ª•p ƒë√™m tuy·ªát v·ªùi
‚Ä¢ Video 4K ProRes

ü•à **Samsung Galaxy S23 Ultra** - Camera 200MP
‚Ä¢ Zoom quang h·ªçc 10x
‚Ä¢ Ch·∫ø ƒë·ªô ch·ª•p ƒë√™m AI
‚Ä¢ Video 8K

ü•â **Google Pixel 8 Pro** - Camera 50MP
‚Ä¢ AI Magic Eraser
‚Ä¢ Night Sight xu·∫•t s·∫Øc
‚Ä¢ Real Tone ch√≠nh x√°c

B·∫°n quan t√¢m v·ªÅ kh·∫£ nƒÉng ch·ª•p ·∫£nh n√†o? Ch·ª•p ƒë√™m, zoom, hay video?`;
        } else if (lowerMessage.includes('pin') || lowerMessage.includes('battery')) {
            response = `üîã **ƒêi·ªán tho·∫°i c√≥ pin t·ªët nh·∫•t:**

‚ö° **Samsung Galaxy S23 Ultra** - 5000mAh
‚Ä¢ S·ª≠ d·ª•ng c·∫£ ng√†y kh√¥ng lo h·∫øt pin
‚Ä¢ S·∫°c nhanh 45W
‚Ä¢ S·∫°c kh√¥ng d√¢y

‚ö° **iPhone 15 Pro Max** - Pin c·∫£ ng√†y
‚Ä¢ S·∫°c nhanh 20W
‚Ä¢ MagSafe s·∫°c kh√¥ng d√¢y
‚Ä¢ T·ªëi ∆∞u iOS

‚ö° **Xiaomi Redmi Note 12** - 5000mAh
‚Ä¢ Pin gi√° r·∫ª t·ªët nh·∫•t
‚Ä¢ S·∫°c nhanh 33W
‚Ä¢ Ti·∫øt ki·ªám ƒëi·ªán

B·∫°n c·∫ßn pin d√πng ƒë∆∞·ª£c bao l√¢u? T√¥i s·∫Ω g·ª£i √Ω ph√π h·ª£p!`;
        } else if (lowerMessage.includes('c·∫£m ∆°n') || lowerMessage.includes('thank')) {
            response = `üòä C·∫£m ∆°n b·∫°n! T√¥i r·∫•t vui ƒë∆∞·ª£c gi√∫p ƒë·ª°. 

N·∫øu b·∫°n c√≥ th√™m c√¢u h·ªèi v·ªÅ s·∫£n ph·∫©m n√†o kh√°c, ƒë·ª´ng ng·∫ßn ng·∫°i h·ªèi nh√©! T√¥i lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n t√¨m ƒë∆∞·ª£c s·∫£n ph·∫©m ph√π h·ª£p nh·∫•t.

Ch√∫c b·∫°n mua s·∫Øm vui v·∫ª! üõí‚ú®`;
        } else {
            response = `T√¥i hi·ªÉu b·∫°n ƒëang t√¨m hi·ªÉu v·ªÅ "${userMessage}". 

ƒê·ªÉ t√¥i c√≥ th·ªÉ h·ªó tr·ª£ t·ªët nh·∫•t, b·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ:

üì± **S·∫£n ph·∫©m c·ª• th·ªÉ:** iPhone, Samsung, Xiaomi...
üí∞ **Ng√¢n s√°ch:** D∆∞·ªõi 5tr, 5-10tr, 10-20tr...
üîç **T√≠nh nƒÉng:** Camera, pin, hi·ªáu nƒÉng...
üìä **So s√°nh:** Gi·ªØa c√°c s·∫£n ph·∫©m

Ho·∫∑c b·∫°n c√≥ th·ªÉ m√¥ t·∫£ chi ti·∫øt h∆°n v·ªÅ nhu c·∫ßu c·ªßa m√¨nh! üòä`;
        }
        
        setIsTyping(false);
        return response;
    };

    const handleSendMessage = async () => {
        if (!inputText.trim()) return;

        const userMessage = {
            id: Date.now(),
            text: inputText,
            sender: 'user',
            timestamp: new Date()
        };

        setMessages(prev => [...prev, userMessage]);
        setInputText('');

        const botResponse = await getAIResponse(inputText);
        
        const botMessage = {
            id: Date.now() + 1,
            text: botResponse,
            sender: 'bot',
            timestamp: new Date()
        };

        setMessages(prev => [...prev, botMessage]);
    };

    const handleKeyPress = (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            handleSendMessage();
        }
    };

    const quickQuestions = [
        "iPhone n√†o t·ªët nh·∫•t?",
        "So s√°nh Samsung v√† iPhone",
        "ƒêi·ªán tho·∫°i n√†o pin t·ªët?",
        "Camera n√†o ch·ª•p ƒë√™m t·ªët?"
    ];

    return (
        <div className={`ai-chatbot ${isOpen ? 'open' : ''}`}>
            {/* Chat Button */}
            <button 
                className="chat-toggle"
                onClick={() => setIsOpen(!isOpen)}
            >
                <span className="chat-icon">ü§ñ</span>
                <span className="chat-text">AI Assistant</span>
            </button>

            {/* Chat Window */}
            <div className="chat-window">
                <div className="chat-header">
                    <div className="bot-info">
                        <div className="bot-avatar">ü§ñ</div>
                        <div className="bot-details">
                            <h3>AI Assistant</h3>
                            <span className="status">ƒêang ho·∫°t ƒë·ªông</span>
                        </div>
                    </div>
                    <button 
                        className="close-btn"
                        onClick={() => setIsOpen(false)}
                    >
                        ‚úï
                    </button>
                </div>

                <div className="chat-messages">
                    {messages.map((message) => (
                        <div 
                            key={message.id} 
                            className={`message ${message.sender}`}
                        >
                            <div className="message-content">
                                <div className="message-text">
                                    {message.text.split('\n').map((line, index) => (
                                        <div key={index}>
                                            {line}
                                            {index < message.text.split('\n').length - 1 && <br />}
                                        </div>
                                    ))}
                                </div>
                                <div className="message-time">
                                    {message.timestamp.toLocaleTimeString('vi-VN', { 
                                        hour: '2-digit', 
                                        minute: '2-digit' 
                                    })}
                                </div>
                            </div>
                        </div>
                    ))}
                    
                    {isTyping && (
                        <div className="message bot">
                            <div className="message-content">
                                <div className="typing-indicator">
                                    <span></span>
                                    <span></span>
                                    <span></span>
                                </div>
                            </div>
                        </div>
                    )}
                    
                    <div ref={messagesEndRef} />
                </div>

                {/* Quick Questions */}
                {messages.length === 1 && (
                    <div className="quick-questions">
                        <h4>C√¢u h·ªèi th∆∞·ªùng g·∫∑p:</h4>
                        <div className="question-buttons">
                            {quickQuestions.map((question, index) => (
                                <button 
                                    key={index}
                                    className="question-btn"
                                    onClick={() => setInputText(question)}
                                >
                                    {question}
                                </button>
                            ))}
                        </div>
                    </div>
                )}

                <div className="chat-input">
                    <input
                        type="text"
                        value={inputText}
                        onChange={(e) => setInputText(e.target.value)}
                        onKeyPress={handleKeyPress}
                        placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."
                        className="message-input"
                    />
                    <button 
                        onClick={handleSendMessage}
                        className="send-btn"
                        disabled={!inputText.trim()}
                    >
                        <span>üì§</span>
                    </button>
                </div>
            </div>
        </div>
    );
}

export default AIChatbot;
